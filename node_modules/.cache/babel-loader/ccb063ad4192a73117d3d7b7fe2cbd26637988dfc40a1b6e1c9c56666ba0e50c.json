{"ast":null,"code":"import Node from '../core/Node.js';\nimport ConstNode from '../core/ConstNode.js';\nimport UVNode from '../accessors/UVNode.js';\nimport MathNode from '../math/MathNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport SplitNode from './SplitNode.js';\nimport JoinNode from './JoinNode.js';\nclass SpriteSheetUVNode extends Node {\n  constructor(countNode) {\n    let uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new UVNode();\n    let frameNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new ConstNode(0);\n    super('vec2');\n    this.countNode = countNode;\n    this.uvNode = uvNode;\n    this.frameNode = frameNode;\n  }\n  generate(builder) {\n    const count = this.countNode;\n    const uv = this.uvNode;\n    const frame = this.frameNode;\n    const one = new ConstNode(1);\n    const width = new SplitNode(count, 'x');\n    const height = new SplitNode(count, 'y');\n    const total = new OperatorNode('*', width, height);\n    const roundFrame = new MathNode(MathNode.FLOOR, new MathNode(MathNode.MOD, frame, total));\n    const frameNum = new OperatorNode('+', roundFrame, one);\n    const cell = new MathNode(MathNode.MOD, roundFrame, width);\n    const row = new MathNode(MathNode.CEIL, new OperatorNode('/', frameNum, width));\n    const rowInv = new OperatorNode('-', height, row);\n    const scale = new OperatorNode('/', one, count);\n    const uvFrameOffset = new JoinNode([new OperatorNode('*', cell, new SplitNode(scale, 'x')), new OperatorNode('*', rowInv, new SplitNode(scale, 'y'))]);\n    const uvScale = new OperatorNode('*', uv, scale);\n    const uvFrame = new OperatorNode('+', uvScale, uvFrameOffset);\n    return uvFrame.build(builder, this.getNodeType(builder));\n  }\n}\nexport default SpriteSheetUVNode;","map":{"version":3,"names":["Node","ConstNode","UVNode","MathNode","OperatorNode","SplitNode","JoinNode","SpriteSheetUVNode","constructor","countNode","uvNode","frameNode","generate","builder","count","uv","frame","one","width","height","total","roundFrame","FLOOR","MOD","frameNum","cell","row","CEIL","rowInv","scale","uvFrameOffset","uvScale","uvFrame","build","getNodeType"],"sources":["/Users/desarrollo/Desktop/free/node_modules/three-stdlib/nodes/utils/SpriteSheetUVNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport ConstNode from '../core/ConstNode.js';\nimport UVNode from '../accessors/UVNode.js';\nimport MathNode from '../math/MathNode.js';\nimport OperatorNode from '../math/OperatorNode.js';\nimport SplitNode from './SplitNode.js';\nimport JoinNode from './JoinNode.js';\n\nclass SpriteSheetUVNode extends Node {\n  constructor(countNode, uvNode = new UVNode(), frameNode = new ConstNode(0)) {\n    super('vec2');\n    this.countNode = countNode;\n    this.uvNode = uvNode;\n    this.frameNode = frameNode;\n  }\n\n  generate(builder) {\n    const count = this.countNode;\n    const uv = this.uvNode;\n    const frame = this.frameNode;\n    const one = new ConstNode(1);\n    const width = new SplitNode(count, 'x');\n    const height = new SplitNode(count, 'y');\n    const total = new OperatorNode('*', width, height);\n    const roundFrame = new MathNode(MathNode.FLOOR, new MathNode(MathNode.MOD, frame, total));\n    const frameNum = new OperatorNode('+', roundFrame, one);\n    const cell = new MathNode(MathNode.MOD, roundFrame, width);\n    const row = new MathNode(MathNode.CEIL, new OperatorNode('/', frameNum, width));\n    const rowInv = new OperatorNode('-', height, row);\n    const scale = new OperatorNode('/', one, count);\n    const uvFrameOffset = new JoinNode([new OperatorNode('*', cell, new SplitNode(scale, 'x')), new OperatorNode('*', rowInv, new SplitNode(scale, 'y'))]);\n    const uvScale = new OperatorNode('*', uv, scale);\n    const uvFrame = new OperatorNode('+', uvScale, uvFrameOffset);\n    return uvFrame.build(builder, this.getNodeType(builder));\n  }\n\n}\n\nexport default SpriteSheetUVNode;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,iBAAiB;AAClC,OAAOC,SAAS,MAAM,sBAAsB;AAC5C,OAAOC,MAAM,MAAM,wBAAwB;AAC3C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,QAAQ,MAAM,eAAe;AAEpC,MAAMC,iBAAiB,SAASP,IAAI,CAAC;EACnCQ,WAAW,CAACC,SAAS,EAAuD;IAAA,IAArDC,MAAM,uEAAG,IAAIR,MAAM,EAAE;IAAA,IAAES,SAAS,uEAAG,IAAIV,SAAS,CAAC,CAAC,CAAC;IACxE,KAAK,CAAC,MAAM,CAAC;IACb,IAAI,CAACQ,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;EAEAC,QAAQ,CAACC,OAAO,EAAE;IAChB,MAAMC,KAAK,GAAG,IAAI,CAACL,SAAS;IAC5B,MAAMM,EAAE,GAAG,IAAI,CAACL,MAAM;IACtB,MAAMM,KAAK,GAAG,IAAI,CAACL,SAAS;IAC5B,MAAMM,GAAG,GAAG,IAAIhB,SAAS,CAAC,CAAC,CAAC;IAC5B,MAAMiB,KAAK,GAAG,IAAIb,SAAS,CAACS,KAAK,EAAE,GAAG,CAAC;IACvC,MAAMK,MAAM,GAAG,IAAId,SAAS,CAACS,KAAK,EAAE,GAAG,CAAC;IACxC,MAAMM,KAAK,GAAG,IAAIhB,YAAY,CAAC,GAAG,EAAEc,KAAK,EAAEC,MAAM,CAAC;IAClD,MAAME,UAAU,GAAG,IAAIlB,QAAQ,CAACA,QAAQ,CAACmB,KAAK,EAAE,IAAInB,QAAQ,CAACA,QAAQ,CAACoB,GAAG,EAAEP,KAAK,EAAEI,KAAK,CAAC,CAAC;IACzF,MAAMI,QAAQ,GAAG,IAAIpB,YAAY,CAAC,GAAG,EAAEiB,UAAU,EAAEJ,GAAG,CAAC;IACvD,MAAMQ,IAAI,GAAG,IAAItB,QAAQ,CAACA,QAAQ,CAACoB,GAAG,EAAEF,UAAU,EAAEH,KAAK,CAAC;IAC1D,MAAMQ,GAAG,GAAG,IAAIvB,QAAQ,CAACA,QAAQ,CAACwB,IAAI,EAAE,IAAIvB,YAAY,CAAC,GAAG,EAAEoB,QAAQ,EAAEN,KAAK,CAAC,CAAC;IAC/E,MAAMU,MAAM,GAAG,IAAIxB,YAAY,CAAC,GAAG,EAAEe,MAAM,EAAEO,GAAG,CAAC;IACjD,MAAMG,KAAK,GAAG,IAAIzB,YAAY,CAAC,GAAG,EAAEa,GAAG,EAAEH,KAAK,CAAC;IAC/C,MAAMgB,aAAa,GAAG,IAAIxB,QAAQ,CAAC,CAAC,IAAIF,YAAY,CAAC,GAAG,EAAEqB,IAAI,EAAE,IAAIpB,SAAS,CAACwB,KAAK,EAAE,GAAG,CAAC,CAAC,EAAE,IAAIzB,YAAY,CAAC,GAAG,EAAEwB,MAAM,EAAE,IAAIvB,SAAS,CAACwB,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IACtJ,MAAME,OAAO,GAAG,IAAI3B,YAAY,CAAC,GAAG,EAAEW,EAAE,EAAEc,KAAK,CAAC;IAChD,MAAMG,OAAO,GAAG,IAAI5B,YAAY,CAAC,GAAG,EAAE2B,OAAO,EAAED,aAAa,CAAC;IAC7D,OAAOE,OAAO,CAACC,KAAK,CAACpB,OAAO,EAAE,IAAI,CAACqB,WAAW,CAACrB,OAAO,CAAC,CAAC;EAC1D;AAEF;AAEA,eAAeN,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}