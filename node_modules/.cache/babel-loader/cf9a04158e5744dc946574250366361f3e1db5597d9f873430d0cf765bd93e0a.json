{"ast":null,"code":"import Node from '../core/Node.js';\nimport { vector } from '../core/NodeBuilder.js';\nclass SplitNode extends Node {\n  constructor(node) {\n    let components = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n    super();\n    this.node = node;\n    this.components = components;\n  }\n  getVectorLength() {\n    let vectorLength = this.components.length;\n    for (const c of this.components) {\n      vectorLength = Math.max(vector.indexOf(c) + 1, vectorLength);\n    }\n    return vectorLength;\n  }\n  getNodeType(builder) {\n    return builder.getTypeFromLength(this.components.length);\n  }\n  generate(builder) {\n    const node = this.node;\n    const nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));\n    if (nodeTypeLength > 1) {\n      let type = null;\n      const componentsLength = this.getVectorLength();\n      if (componentsLength >= nodeTypeLength) {\n        // need expand the input node\n        type = builder.getTypeFromLength(this.getVectorLength());\n      }\n      const nodeSnippet = node.build(builder, type);\n      return `${nodeSnippet}.${this.components}`;\n    } else {\n      // ignore components if node is a float\n      return node.build(builder);\n    }\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.components = this.components;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.components = data.components;\n  }\n}\nexport default SplitNode;","map":{"version":3,"names":["Node","vector","SplitNode","constructor","node","components","getVectorLength","vectorLength","length","c","Math","max","indexOf","getNodeType","builder","getTypeFromLength","generate","nodeTypeLength","getTypeLength","type","componentsLength","nodeSnippet","build","serialize","data","deserialize"],"sources":["/Users/desarrollo/Desktop/free/node_modules/three-stdlib/nodes/utils/SplitNode.js"],"sourcesContent":["import Node from '../core/Node.js';\nimport { vector } from '../core/NodeBuilder.js';\n\nclass SplitNode extends Node {\n  constructor(node, components = 'x') {\n    super();\n    this.node = node;\n    this.components = components;\n  }\n\n  getVectorLength() {\n    let vectorLength = this.components.length;\n\n    for (const c of this.components) {\n      vectorLength = Math.max(vector.indexOf(c) + 1, vectorLength);\n    }\n\n    return vectorLength;\n  }\n\n  getNodeType(builder) {\n    return builder.getTypeFromLength(this.components.length);\n  }\n\n  generate(builder) {\n    const node = this.node;\n    const nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));\n\n    if (nodeTypeLength > 1) {\n      let type = null;\n      const componentsLength = this.getVectorLength();\n\n      if (componentsLength >= nodeTypeLength) {\n        // need expand the input node\n        type = builder.getTypeFromLength(this.getVectorLength());\n      }\n\n      const nodeSnippet = node.build(builder, type);\n      return `${nodeSnippet}.${this.components}`;\n    } else {\n      // ignore components if node is a float\n      return node.build(builder);\n    }\n  }\n\n  serialize(data) {\n    super.serialize(data);\n    data.components = this.components;\n  }\n\n  deserialize(data) {\n    super.deserialize(data);\n    this.components = data.components;\n  }\n\n}\n\nexport default SplitNode;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,iBAAiB;AAClC,SAASC,MAAM,QAAQ,wBAAwB;AAE/C,MAAMC,SAAS,SAASF,IAAI,CAAC;EAC3BG,WAAW,CAACC,IAAI,EAAoB;IAAA,IAAlBC,UAAU,uEAAG,GAAG;IAChC,KAAK,EAAE;IACP,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,UAAU,GAAGA,UAAU;EAC9B;EAEAC,eAAe,GAAG;IAChB,IAAIC,YAAY,GAAG,IAAI,CAACF,UAAU,CAACG,MAAM;IAEzC,KAAK,MAAMC,CAAC,IAAI,IAAI,CAACJ,UAAU,EAAE;MAC/BE,YAAY,GAAGG,IAAI,CAACC,GAAG,CAACV,MAAM,CAACW,OAAO,CAACH,CAAC,CAAC,GAAG,CAAC,EAAEF,YAAY,CAAC;IAC9D;IAEA,OAAOA,YAAY;EACrB;EAEAM,WAAW,CAACC,OAAO,EAAE;IACnB,OAAOA,OAAO,CAACC,iBAAiB,CAAC,IAAI,CAACV,UAAU,CAACG,MAAM,CAAC;EAC1D;EAEAQ,QAAQ,CAACF,OAAO,EAAE;IAChB,MAAMV,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMa,cAAc,GAAGH,OAAO,CAACI,aAAa,CAACd,IAAI,CAACS,WAAW,CAACC,OAAO,CAAC,CAAC;IAEvE,IAAIG,cAAc,GAAG,CAAC,EAAE;MACtB,IAAIE,IAAI,GAAG,IAAI;MACf,MAAMC,gBAAgB,GAAG,IAAI,CAACd,eAAe,EAAE;MAE/C,IAAIc,gBAAgB,IAAIH,cAAc,EAAE;QACtC;QACAE,IAAI,GAAGL,OAAO,CAACC,iBAAiB,CAAC,IAAI,CAACT,eAAe,EAAE,CAAC;MAC1D;MAEA,MAAMe,WAAW,GAAGjB,IAAI,CAACkB,KAAK,CAACR,OAAO,EAAEK,IAAI,CAAC;MAC7C,OAAQ,GAAEE,WAAY,IAAG,IAAI,CAAChB,UAAW,EAAC;IAC5C,CAAC,MAAM;MACL;MACA,OAAOD,IAAI,CAACkB,KAAK,CAACR,OAAO,CAAC;IAC5B;EACF;EAEAS,SAAS,CAACC,IAAI,EAAE;IACd,KAAK,CAACD,SAAS,CAACC,IAAI,CAAC;IACrBA,IAAI,CAACnB,UAAU,GAAG,IAAI,CAACA,UAAU;EACnC;EAEAoB,WAAW,CAACD,IAAI,EAAE;IAChB,KAAK,CAACC,WAAW,CAACD,IAAI,CAAC;IACvB,IAAI,CAACnB,UAAU,GAAGmB,IAAI,CAACnB,UAAU;EACnC;AAEF;AAEA,eAAeH,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}