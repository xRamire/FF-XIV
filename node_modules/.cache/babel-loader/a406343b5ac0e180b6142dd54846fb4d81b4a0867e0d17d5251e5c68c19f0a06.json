{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateGrammar = exports.resolveGrammar = void 0;\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\nvar defaults_1 = __importDefault(require(\"lodash/defaults\"));\nvar resolver_1 = require(\"../resolver\");\nvar checks_1 = require(\"../checks\");\nvar errors_public_1 = require(\"../../errors_public\");\nfunction resolveGrammar(options) {\n  var actualOptions = (0, defaults_1.default)(options, {\n    errMsgProvider: errors_public_1.defaultGrammarResolverErrorProvider\n  });\n  var topRulesTable = {};\n  (0, forEach_1.default)(options.rules, function (rule) {\n    topRulesTable[rule.name] = rule;\n  });\n  return (0, resolver_1.resolveGrammar)(topRulesTable, actualOptions.errMsgProvider);\n}\nexports.resolveGrammar = resolveGrammar;\nfunction validateGrammar(options) {\n  options = (0, defaults_1.default)(options, {\n    errMsgProvider: errors_public_1.defaultGrammarValidatorErrorProvider\n  });\n  return (0, checks_1.validateGrammar)(options.rules, options.tokenTypes, options.errMsgProvider, options.grammarName);\n}\nexports.validateGrammar = validateGrammar;","map":{"version":3,"mappings":";;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAeA,SAAgBA,cAAc,CAC5BC,OAA2B;EAE3B,IAAMC,aAAa,GAAiC,sBAAQ,EAACD,OAAO,EAAE;IACpEE,cAAc,EAAEC;GACjB,CAAC;EAEF,IAAMC,aAAa,GAAiC,EAAE;EACtD,qBAAO,EAACJ,OAAO,CAACK,KAAK,EAAE,UAACC,IAAI;IAC1BF,aAAa,CAACE,IAAI,CAACC,IAAI,CAAC,GAAGD,IAAI;EACjC,CAAC,CAAC;EACF,OAAO,6BAAiB,EAACF,aAAa,EAAEH,aAAa,CAACC,cAAc,CAAC;AACvE;AAZAM;AAcA,SAAgBC,eAAe,CAACT,OAK/B;EACCA,OAAO,GAAG,sBAAQ,EAACA,OAAO,EAAE;IAC1BE,cAAc,EAAEC;GACjB,CAAC;EAEF,OAAO,4BAAkB,EACvBH,OAAO,CAACK,KAAK,EACbL,OAAO,CAACU,UAAU,EAClBV,OAAO,CAACE,cAAc,EACtBF,OAAO,CAACW,WAAW,CACpB;AACH;AAhBAH","names":["resolveGrammar","options","actualOptions","errMsgProvider","errors_public_1","topRulesTable","rules","rule","name","exports","validateGrammar","tokenTypes","grammarName"],"sources":["/Users/desarrollo/Desktop/free/node_modules/chevrotain/src/parse/grammar/gast/gast_resolver_public.ts"],"sourcesContent":["import { Rule } from \"@chevrotain/gast\"\nimport forEach from \"lodash/forEach\"\nimport defaults from \"lodash/defaults\"\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver\"\nimport { validateGrammar as orgValidateGrammar } from \"../checks\"\nimport {\n  defaultGrammarResolverErrorProvider,\n  defaultGrammarValidatorErrorProvider\n} from \"../../errors_public\"\nimport { TokenType } from \"@chevrotain/types\"\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError\n} from \"../types\"\n\ntype ResolveGrammarOpts = {\n  rules: Rule[]\n  errMsgProvider?: IGrammarResolverErrorMessageProvider\n}\nexport function resolveGrammar(\n  options: ResolveGrammarOpts\n): IParserDefinitionError[] {\n  const actualOptions: Required<ResolveGrammarOpts> = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider\n  })\n\n  const topRulesTable: { [ruleName: string]: Rule } = {}\n  forEach(options.rules, (rule) => {\n    topRulesTable[rule.name] = rule\n  })\n  return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider)\n}\n\nexport function validateGrammar(options: {\n  rules: Rule[]\n  tokenTypes: TokenType[]\n  grammarName: string\n  errMsgProvider: IGrammarValidatorErrorMessageProvider\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider\n  })\n\n  return orgValidateGrammar(\n    options.rules,\n    options.tokenTypes,\n    options.errMsgProvider,\n    options.grammarName\n  )\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}