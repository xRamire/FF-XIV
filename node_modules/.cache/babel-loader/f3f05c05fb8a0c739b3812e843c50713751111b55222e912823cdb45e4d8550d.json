{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RecognizerEngine = void 0;\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\nvar every_1 = __importDefault(require(\"lodash/every\"));\nvar uniq_1 = __importDefault(require(\"lodash/uniq\"));\nvar isObject_1 = __importDefault(require(\"lodash/isObject\"));\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar values_1 = __importDefault(require(\"lodash/values\"));\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\nvar keys_1 = require(\"../../grammar/keys\");\nvar exceptions_public_1 = require(\"../../exceptions_public\");\nvar lookahead_1 = require(\"../../grammar/lookahead\");\nvar interpreter_1 = require(\"../../grammar/interpreter\");\nvar parser_1 = require(\"../parser\");\nvar recoverable_1 = require(\"./recoverable\");\nvar tokens_public_1 = require(\"../../../scan/tokens_public\");\nvar tokens_1 = require(\"../../../scan/tokens\");\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nvar RecognizerEngine = /** @class */function () {\n  function RecognizerEngine() {}\n  RecognizerEngine.prototype.initRecognizerEngine = function (tokenVocabulary, config) {\n    this.className = this.constructor.name;\n    // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokens_1.tokenStructuredMatcherNoCategories;\n    this.subruleIdx = 0;\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n    if ((0, has_1.default)(config, \"serializedGrammar\")) {\n      throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" + \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" + \"\\tFor Further details.\");\n    }\n    if ((0, isArray_1.default)(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if ((0, isEmpty_1.default)(tokenVocabulary)) {\n        throw Error(\"A Token Vocabulary cannot be empty.\\n\" + \"\\tNote that the first argument for the parser constructor\\n\" + \"\\tis no longer a Token vector (since v4.0).\");\n      }\n      if (typeof tokenVocabulary[0].startOffset === \"number\") {\n        throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\" + \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" + \"\\tFor Further details.\");\n      }\n    }\n    if ((0, isArray_1.default)(tokenVocabulary)) {\n      this.tokensMap = (0, reduce_1.default)(tokenVocabulary, function (acc, tokType) {\n        acc[tokType.name] = tokType;\n        return acc;\n      }, {});\n    } else if ((0, has_1.default)(tokenVocabulary, \"modes\") && (0, every_1.default)((0, flatten_1.default)((0, values_1.default)(tokenVocabulary.modes)), tokens_1.isTokenType)) {\n      var allTokenTypes_1 = (0, flatten_1.default)((0, values_1.default)(tokenVocabulary.modes));\n      var uniqueTokens = (0, uniq_1.default)(allTokenTypes_1);\n      this.tokensMap = (0, reduce_1.default)(uniqueTokens, function (acc, tokType) {\n        acc[tokType.name] = tokType;\n        return acc;\n      }, {});\n    } else if ((0, isObject_1.default)(tokenVocabulary)) {\n      this.tokensMap = (0, clone_1.default)(tokenVocabulary);\n    } else {\n      throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors,\" + \" A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n    }\n    // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n    this.tokensMap[\"EOF\"] = tokens_public_1.EOF;\n    var allTokenTypes = (0, has_1.default)(tokenVocabulary, \"modes\") ? (0, flatten_1.default)((0, values_1.default)(tokenVocabulary.modes)) : (0, values_1.default)(tokenVocabulary);\n    var noTokenCategoriesUsed = (0, every_1.default)(allTokenTypes, function (tokenConstructor) {\n      return (0, isEmpty_1.default)(tokenConstructor.categoryMatches);\n    });\n    this.tokenMatcher = noTokenCategoriesUsed ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher;\n    // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n    (0, tokens_1.augmentTokenTypes)((0, values_1.default)(this.tokensMap));\n  };\n  RecognizerEngine.prototype.defineRule = function (ruleName, impl, config) {\n    if (this.selfAnalysisDone) {\n      throw Error(\"Grammar rule <\".concat(ruleName, \"> may not be defined after the 'performSelfAnalysis' method has been called'\\n\") + \"Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.\");\n    }\n    var resyncEnabled = (0, has_1.default)(config, \"resyncEnabled\") ? config.resyncEnabled // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_RULE_CONFIG.resyncEnabled;\n    var recoveryValueFunc = (0, has_1.default)(config, \"recoveryValueFunc\") ? config.recoveryValueFunc // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_RULE_CONFIG.recoveryValueFunc;\n    // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n    var shortName = this.ruleShortNameIdx << keys_1.BITS_FOR_METHOD_TYPE + keys_1.BITS_FOR_OCCURRENCE_IDX;\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n    var invokeRuleWithTry;\n    // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          impl.apply(this, args);\n          var cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst;\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          return impl.apply(this, args);\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    }\n    var wrappedGrammarRule = Object.assign(invokeRuleWithTry, {\n      ruleName: ruleName,\n      originalGrammarAction: impl\n    });\n    return wrappedGrammarRule;\n  };\n  RecognizerEngine.prototype.invokeRuleCatch = function (e, resyncEnabledConfig, recoveryValueFunc) {\n    var isFirstInvokedRule = this.RULE_STACK.length === 1;\n    // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n    var reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n    if ((0, exceptions_public_1.isRecognitionException)(e)) {\n      var recogError = e;\n      if (reSyncEnabled) {\n        var reSyncTokType = this.findReSyncTokenType();\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n          if (this.outputCst) {\n            var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc();\n          }\n        } else {\n          if (this.outputCst) {\n            var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          }\n          // to be handled Further up the call stack\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState();\n        // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n        return recoveryValueFunc();\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  };\n  // Implementation of parsing DSL\n  RecognizerEngine.prototype.optionInternal = function (actionORMethodDef, occurrence) {\n    var key = this.getKeyForAutomaticLookahead(keys_1.OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  };\n  RecognizerEngine.prototype.optionInternalLogic = function (actionORMethodDef, occurrence, key) {\n    var _this = this;\n    var lookAheadFunc = this.getLaFuncFromCache(key);\n    var action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      var predicate_1 = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate_1 !== undefined) {\n        var orgLookaheadFunction_1 = lookAheadFunc;\n        lookAheadFunc = function () {\n          return predicate_1.call(_this) && orgLookaheadFunction_1.call(_this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n    return undefined;\n  };\n  RecognizerEngine.prototype.atLeastOneInternal = function (prodOccurrence, actionORMethodDef) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_IDX, prodOccurrence);\n    return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  };\n  RecognizerEngine.prototype.atLeastOneInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n    var _this = this;\n    var lookAheadFunc = this.getLaFuncFromCache(key);\n    var action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      var predicate_2 = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate_2 !== undefined) {\n        var orgLookaheadFunction_2 = lookAheadFunc;\n        lookAheadFunc = function () {\n          return predicate_2.call(_this) && orgLookaheadFunction_2.call(_this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n    if (lookAheadFunc.call(this) === true) {\n      var notStuck = this.doSingleRepetition(action);\n      while (lookAheadFunc.call(this) === true && notStuck === true) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n    }\n    // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, keys_1.AT_LEAST_ONE_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneWalker);\n  };\n  RecognizerEngine.prototype.atLeastOneSepFirstInternal = function (prodOccurrence, options) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence);\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  };\n  RecognizerEngine.prototype.atLeastOneSepFirstInternalLogic = function (prodOccurrence, options, key) {\n    var _this = this;\n    var action = options.DEF;\n    var separator = options.SEP;\n    var firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n    // 1st iteration\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      ;\n      action.call(this);\n      //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n      var separatorLookAheadFunc = function () {\n        return _this.tokenMatcher(_this.LA(1), separator);\n      };\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        action.call(this);\n      }\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, interpreter_1.NextTerminalAfterAtLeastOneSepWalker], separatorLookAheadFunc, keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneSepWalker);\n    } else {\n      throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n    }\n  };\n  RecognizerEngine.prototype.manyInternal = function (prodOccurrence, actionORMethodDef) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  };\n  RecognizerEngine.prototype.manyInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n    var _this = this;\n    var lookaheadFunction = this.getLaFuncFromCache(key);\n    var action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      var predicate_3 = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate_3 !== undefined) {\n        var orgLookaheadFunction_3 = lookaheadFunction;\n        lookaheadFunction = function () {\n          return predicate_3.call(_this) && orgLookaheadFunction_3.call(_this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n    var notStuck = true;\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    }\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, keys_1.MANY_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManyWalker,\n    // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n    // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n    // An infinite loop cannot occur as:\n    // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n    // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n    notStuck);\n  };\n  RecognizerEngine.prototype.manySepFirstInternal = function (prodOccurrence, options) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_SEP_IDX, prodOccurrence);\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  };\n  RecognizerEngine.prototype.manySepFirstInternalLogic = function (prodOccurrence, options, key) {\n    var _this = this;\n    var action = options.DEF;\n    var separator = options.SEP;\n    var firstIterationLaFunc = this.getLaFuncFromCache(key);\n    // 1st iteration\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n      var separatorLookAheadFunc = function () {\n        return _this.tokenMatcher(_this.LA(1), separator);\n      };\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        action.call(this);\n      }\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, interpreter_1.NextTerminalAfterManySepWalker], separatorLookAheadFunc, keys_1.MANY_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManySepWalker);\n    }\n  };\n  RecognizerEngine.prototype.repetitionSepSecondInternal = function (prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    }\n    // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    /* istanbul ignore else */\n    this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker], separatorLookAheadFunc, keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);\n  };\n  RecognizerEngine.prototype.doSingleRepetition = function (action) {\n    var beforeIteration = this.getLexerPosition();\n    action.call(this);\n    var afterIteration = this.getLexerPosition();\n    // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n    return afterIteration > beforeIteration;\n  };\n  RecognizerEngine.prototype.orInternal = function (altsOrOpts, occurrence) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.OR_IDX, occurrence);\n    var alts = (0, isArray_1.default)(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n    var laFunc = this.getLaFuncFromCache(laKey);\n    var altIdxToTake = laFunc.call(this, alts);\n    if (altIdxToTake !== undefined) {\n      var chosenAlternative = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n    this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n  };\n  RecognizerEngine.prototype.ruleFinallyStateUpdate = function () {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop();\n    // NOOP when cst is disabled\n    this.cstFinallyStateUpdate();\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      var firstRedundantTok = this.LA(1);\n      var errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName()\n      });\n      this.SAVE_ERROR(new exceptions_public_1.NotAllInputParsedException(errMsg, firstRedundantTok));\n    }\n  };\n  RecognizerEngine.prototype.subruleInternal = function (ruleToCall, idx, options) {\n    var ruleResult;\n    try {\n      var args = options !== undefined ? options.ARGS : undefined;\n      this.subruleIdx = idx;\n      ruleResult = ruleToCall.apply(this, args);\n      this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleToCall.ruleName);\n      return ruleResult;\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  };\n  RecognizerEngine.prototype.subruleInternalError = function (e, options, ruleName) {\n    if ((0, exceptions_public_1.isRecognitionException)(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleName);\n      delete e.partialCstResult;\n    }\n    throw e;\n  };\n  RecognizerEngine.prototype.consumeInternal = function (tokType, idx, options) {\n    var consumedToken;\n    try {\n      var nextToken = this.LA(1);\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n    }\n    this.cstPostTerminal(options !== undefined && options.LABEL !== undefined ? options.LABEL : tokType.name, consumedToken);\n    return consumedToken;\n  };\n  RecognizerEngine.prototype.consumeInternalError = function (tokType, nextToken, options) {\n    var msg;\n    var previousToken = this.LA(0);\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName()\n      });\n    }\n    throw this.SAVE_ERROR(new exceptions_public_1.MismatchedTokenException(msg, nextToken, previousToken));\n  };\n  RecognizerEngine.prototype.consumeInternalRecovery = function (tokType, idx, eFromConsumption) {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (this.recoveryEnabled &&\n    // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n    eFromConsumption.name === \"MismatchedTokenException\" && !this.isBackTracking()) {\n      var follows = this.getFollowsForInRuleRecovery(tokType, idx);\n      try {\n        return this.tryInRuleRecovery(tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === recoverable_1.IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  };\n  RecognizerEngine.prototype.saveRecogState = function () {\n    // errors is a getter which will clone the errors array\n    var savedErrors = this.errors;\n    var savedRuleStack = (0, clone_1.default)(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK\n    };\n  };\n  RecognizerEngine.prototype.reloadRecogState = function (newState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  };\n  RecognizerEngine.prototype.ruleInvocationStateUpdate = function (shortName, fullName, idxInCallingRule) {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName);\n    // NOOP when cst is disabled\n    this.cstInvocationStateUpdate(fullName);\n  };\n  RecognizerEngine.prototype.isBackTracking = function () {\n    return this.isBackTrackingStack.length !== 0;\n  };\n  RecognizerEngine.prototype.getCurrRuleFullName = function () {\n    var shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  };\n  RecognizerEngine.prototype.shortRuleNameToFullName = function (shortName) {\n    return this.shortRuleNameToFull[shortName];\n  };\n  RecognizerEngine.prototype.isAtEndOfInput = function () {\n    return this.tokenMatcher(this.LA(1), tokens_public_1.EOF);\n  };\n  RecognizerEngine.prototype.reset = function () {\n    this.resetLexerState();\n    this.subruleIdx = 0;\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = [];\n    // TODO: extract a specific reset for TreeBuilder trait\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  };\n  return RecognizerEngine;\n}();\nexports.RecognizerEngine = RecognizerEngine;","map":{"version":3,"mappings":"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","names":["RecognizerEngine","tokenVocabulary","config","className","constructor","name","shortRuleNameToFull","fullRuleNameToShort","ruleShortNameIdx","tokenMatcher","tokens_1","subruleIdx","definedRulesNames","tokensMap","isBackTrackingStack","RULE_STACK","RULE_OCCURRENCE_STACK","gastProductionsCache","Error","startOffset","acc","tokType","modes","allTokenTypes_1","uniqueTokens","tokens_public_1","allTokenTypes","noTokenCategoriesUsed","tokenConstructor","categoryMatches","ruleName","impl","selfAnalysisDone","resyncEnabled","parser_1","recoveryValueFunc","shortName","keys_1","invokeRuleWithTry","outputCst","_i","args","ruleInvocationStateUpdate","apply","cst","CST_STACK","length","cstPostRule","e","invokeRuleCatch","ruleFinallyStateUpdate","invokeRuleWithTryCst","wrappedGrammarRule","Object","assign","originalGrammarAction","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","isBackTracking","recoveryEnabled","recogError","reSyncTokType","findReSyncTokenType","isInCurrentRuleReSyncSet","resyncedTokens","reSyncTo","partialCstResult","recoveredNode","moveToTerminatedState","actionORMethodDef","occurrence","key","getKeyForAutomaticLookahead","optionInternalLogic","lookAheadFunc","getLaFuncFromCache","action","DEF","predicate_1","GATE","undefined","orgLookaheadFunction_1","call","_this","prodOccurrence","laKey","atLeastOneInternalLogic","predicate_2","orgLookaheadFunction_2","notStuck","doSingleRepetition","raiseEarlyExitException","lookahead_1","REPETITION_MANDATORY","ERR_MSG","attemptInRepetitionRecovery","atLeastOneInternal","interpreter_1","options","atLeastOneSepFirstInternalLogic","separator","SEP","firstIterationLookaheadFunc","separatorLookAheadFunc","LA","CONSUME","repetitionSepSecondInternal","REPETITION_MANDATORY_WITH_SEPARATOR","manyInternalLogic","lookaheadFunction","predicate_3","orgLookaheadFunction_3","manyInternal","manySepFirstInternalLogic","firstIterationLaFunc","nextTerminalAfterWalker","beforeIteration","getLexerPosition","afterIteration","altsOrOpts","alts","laFunc","altIdxToTake","chosenAlternative","ALT","raiseNoAltException","pop","cstFinallyStateUpdate","isAtEndOfInput","firstRedundantTok","errMsg","errorMessageProvider","buildNotAllInputParsedMessage","firstRedundant","getCurrRuleFullName","SAVE_ERROR","exceptions_public_1","ruleToCall","idx","ruleResult","ARGS","cstPostNonTerminal","LABEL","subruleInternalError","consumedToken","nextToken","consumeToken","consumeInternalError","eFromConsumption","consumeInternalRecovery","cstPostTerminal","msg","previousToken","buildMismatchTokenMessage","expected","actual","previous","follows","getFollowsForInRuleRecovery","tryInRuleRecovery","eFromInRuleRecovery","recoverable_1","savedErrors","errors","savedRuleStack","lexerState","exportLexerState","newState","importLexerState","fullName","idxInCallingRule","push","cstInvocationStateUpdate","getLastExplicitRuleShortName","resetLexerState","exports"],"sources":["/Users/desarrollo/Desktop/free/node_modules/chevrotain/src/parse/parser/traits/recognizer_engine.ts"],"sourcesContent":["import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IRuleConfig,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  ParserMethod,\n  SubruleMethodOpts,\n  TokenType,\n  TokenTypeDictionary,\n  TokenVocabulary\n} from \"@chevrotain/types\"\nimport isEmpty from \"lodash/isEmpty\"\nimport isArray from \"lodash/isArray\"\nimport flatten from \"lodash/flatten\"\nimport every from \"lodash/every\"\nimport uniq from \"lodash/uniq\"\nimport isObject from \"lodash/isObject\"\nimport has from \"lodash/has\"\nimport values from \"lodash/values\"\nimport reduce from \"lodash/reduce\"\nimport clone from \"lodash/clone\"\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  BITS_FOR_METHOD_TYPE,\n  BITS_FOR_OCCURRENCE_IDX,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX\n} from \"../../grammar/keys\"\nimport {\n  isRecognitionException,\n  MismatchedTokenException,\n  NotAllInputParsedException\n} from \"../../exceptions_public\"\nimport { PROD_TYPE } from \"../../grammar/lookahead\"\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  NextTerminalAfterAtLeastOneSepWalker,\n  NextTerminalAfterAtLeastOneWalker,\n  NextTerminalAfterManySepWalker,\n  NextTerminalAfterManyWalker\n} from \"../../grammar/interpreter\"\nimport { DEFAULT_RULE_CONFIG, IParserState, TokenMatcher } from \"../parser\"\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable\"\nimport { EOF } from \"../../../scan/tokens_public\"\nimport { MixedInParser } from \"./parser_traits\"\nimport {\n  augmentTokenTypes,\n  isTokenType,\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories\n} from \"../../../scan/tokens\"\nimport { Rule } from \"@chevrotain/gast\"\nimport { ParserMethodInternal } from \"../types\"\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nexport class RecognizerEngine {\n  isBackTrackingStack: boolean[]\n  className: string\n  RULE_STACK: number[]\n  RULE_OCCURRENCE_STACK: number[]\n  definedRulesNames: string[]\n  tokensMap: { [fqn: string]: TokenType }\n  gastProductionsCache: Record<string, Rule>\n  shortRuleNameToFull: Record<string, string>\n  fullRuleNameToShort: Record<string, number>\n  // The shortName Index must be coded \"after\" the first 8bits to enable building unique lookahead keys\n  ruleShortNameIdx: number\n  tokenMatcher: TokenMatcher\n  subruleIdx: number\n\n  initRecognizerEngine(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfig\n  ) {\n    this.className = this.constructor.name\n    // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n    this.shortRuleNameToFull = {}\n    this.fullRuleNameToShort = {}\n    this.ruleShortNameIdx = 256\n    this.tokenMatcher = tokenStructuredMatcherNoCategories\n    this.subruleIdx = 0\n\n    this.definedRulesNames = []\n    this.tokensMap = {}\n    this.isBackTrackingStack = []\n    this.RULE_STACK = []\n    this.RULE_OCCURRENCE_STACK = []\n    this.gastProductionsCache = {}\n\n    if (has(config, \"serializedGrammar\")) {\n      throw Error(\n        \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n          \"\\tFor Further details.\"\n      )\n    }\n\n    if (isArray(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if (isEmpty(tokenVocabulary as any[])) {\n        throw Error(\n          \"A Token Vocabulary cannot be empty.\\n\" +\n            \"\\tNote that the first argument for the parser constructor\\n\" +\n            \"\\tis no longer a Token vector (since v4.0).\"\n        )\n      }\n\n      if (typeof (tokenVocabulary as any[])[0].startOffset === \"number\") {\n        throw Error(\n          \"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n            \"\\tFor Further details.\"\n        )\n      }\n    }\n\n    if (isArray(tokenVocabulary)) {\n      this.tokensMap = reduce(\n        tokenVocabulary,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType\n          return acc\n        },\n        {} as { [tokenName: string]: TokenType }\n      )\n    } else if (\n      has(tokenVocabulary, \"modes\") &&\n      every(flatten(values((<any>tokenVocabulary).modes)), isTokenType)\n    ) {\n      const allTokenTypes = flatten(values((<any>tokenVocabulary).modes))\n      const uniqueTokens = uniq(allTokenTypes)\n      this.tokensMap = <any>reduce(\n        uniqueTokens,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType\n          return acc\n        },\n        {} as { [tokenName: string]: TokenType }\n      )\n    } else if (isObject(tokenVocabulary)) {\n      this.tokensMap = clone(tokenVocabulary as TokenTypeDictionary)\n    } else {\n      throw new Error(\n        \"<tokensDictionary> argument must be An Array of Token constructors,\" +\n          \" A dictionary of Token constructors or an IMultiModeLexerDefinition\"\n      )\n    }\n\n    // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n    this.tokensMap[\"EOF\"] = EOF\n\n    const allTokenTypes = has(tokenVocabulary, \"modes\")\n      ? flatten(values((<any>tokenVocabulary).modes))\n      : values(tokenVocabulary)\n    const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\n      isEmpty(tokenConstructor.categoryMatches)\n    )\n\n    this.tokenMatcher = noTokenCategoriesUsed\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher\n\n    // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n    augmentTokenTypes(values(this.tokensMap))\n  }\n\n  defineRule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleName: string,\n    impl: (...args: ARGS) => R,\n    config: IRuleConfig<R>\n  ): ParserMethodInternal<ARGS, R> {\n    if (this.selfAnalysisDone) {\n      throw Error(\n        `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n          `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`\n      )\n    }\n    const resyncEnabled: boolean = has(config, \"resyncEnabled\")\n      ? (config.resyncEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.resyncEnabled\n    const recoveryValueFunc = has(config, \"recoveryValueFunc\")\n      ? (config.recoveryValueFunc as () => R) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.recoveryValueFunc\n\n    // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n    const shortName =\n      this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX)\n\n    this.ruleShortNameIdx++\n    this.shortRuleNameToFull[shortName] = ruleName\n    this.fullRuleNameToShort[ruleName] = shortName\n\n    let invokeRuleWithTry: ParserMethod<ARGS, R>\n\n    // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx)\n          impl.apply(this, args)\n          const cst = this.CST_STACK[this.CST_STACK.length - 1]\n          this.cstPostRule(cst)\n          return cst as unknown as R\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R\n        } finally {\n          this.ruleFinallyStateUpdate()\n        }\n      }\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx)\n          return impl.apply(this, args)\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R\n        } finally {\n          this.ruleFinallyStateUpdate()\n        }\n      }\n    }\n\n    const wrappedGrammarRule: ParserMethodInternal<ARGS, R> = Object.assign(\n      invokeRuleWithTry as any,\n      { ruleName, originalGrammarAction: impl }\n    )\n\n    return wrappedGrammarRule\n  }\n\n  invokeRuleCatch(\n    this: MixedInParser,\n    e: Error,\n    resyncEnabledConfig: boolean,\n    recoveryValueFunc: Function\n  ): unknown {\n    const isFirstInvokedRule = this.RULE_STACK.length === 1\n    // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n    const reSyncEnabled =\n      resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled\n\n    if (isRecognitionException(e)) {\n      const recogError: any = e\n      if (reSyncEnabled) {\n        const reSyncTokType = this.findReSyncTokenType()\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType)\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1]\n            partialCstResult.recoveredNode = true\n            return partialCstResult\n          } else {\n            return recoveryValueFunc()\n          }\n        } else {\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1]\n            partialCstResult.recoveredNode = true\n            recogError.partialCstResult = partialCstResult\n          }\n          // to be handled Further up the call stack\n          throw recogError\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState()\n        // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n        return recoveryValueFunc()\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternal<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number\n  ): OUT | undefined {\n    const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence)\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key)\n  }\n\n  optionInternalLogic<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n    key: number\n  ): OUT | undefined {\n    let lookAheadFunc = this.getLaFuncFromCache(key)\n    let action: GrammarAction<OUT>\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF\n      const predicate = actionORMethodDef.GATE\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this)\n        }\n      }\n    } else {\n      action = actionORMethodDef\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this)\n    }\n    return undefined\n  }\n\n  atLeastOneInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_IDX,\n      prodOccurrence\n    )\n    return this.atLeastOneInternalLogic(\n      prodOccurrence,\n      actionORMethodDef,\n      laKey\n    )\n  }\n\n  atLeastOneInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n    key: number\n  ): void {\n    let lookAheadFunc = this.getLaFuncFromCache(key)\n    let action\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF\n      const predicate = actionORMethodDef.GATE\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this)\n        }\n      }\n    } else {\n      action = actionORMethodDef\n    }\n\n    if ((<Function>lookAheadFunc).call(this) === true) {\n      let notStuck = this.doSingleRepetition(action)\n      while (\n        (<Function>lookAheadFunc).call(this) === true &&\n        notStuck === true\n      ) {\n        notStuck = this.doSingleRepetition(action)\n      }\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY,\n        (<DSLMethodOptsWithErr<OUT>>actionORMethodDef).ERR_MSG\n      )\n    }\n\n    // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.atLeastOneInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookAheadFunc,\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n      NextTerminalAfterAtLeastOneWalker\n    )\n  }\n\n  atLeastOneSepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence\n    )\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey)\n  }\n\n  atLeastOneSepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n    key: number\n  ): void {\n    const action = options.DEF\n    const separator = options.SEP\n\n    const firstIterationLookaheadFunc = this.getLaFuncFromCache(key)\n\n    // 1st iteration\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      ;(<GrammarAction<OUT>>action).call(this)\n\n      //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator)\n      }\n\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator)\n        // No need for checking infinite loop here due to consuming the separator.\n        ;(<GrammarAction<OUT>>action).call(this)\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterAtLeastOneSepWalker\n        ],\n        separatorLookAheadFunc,\n        AT_LEAST_ONE_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterAtLeastOneSepWalker\n      )\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        options.ERR_MSG\n      )\n    }\n  }\n\n  manyInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence)\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey)\n  }\n\n  manyInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    key: number\n  ) {\n    let lookaheadFunction = this.getLaFuncFromCache(key)\n    let action\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF\n      const predicate = actionORMethodDef.GATE\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookaheadFunction\n        lookaheadFunction = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this)\n        }\n      }\n    } else {\n      action = actionORMethodDef\n    }\n\n    let notStuck = true\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action)\n    }\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.manyInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookaheadFunction,\n      MANY_IDX,\n      prodOccurrence,\n      NextTerminalAfterManyWalker,\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n      // An infinite loop cannot occur as:\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n      notStuck\n    )\n  }\n\n  manySepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(MANY_SEP_IDX, prodOccurrence)\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey)\n  }\n\n  manySepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n    key: number\n  ): void {\n    const action = options.DEF\n    const separator = options.SEP\n    const firstIterationLaFunc = this.getLaFuncFromCache(key)\n\n    // 1st iteration\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this)\n\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator)\n      }\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator)\n        // No need for checking infinite loop here due to consuming the separator.\n        action.call(this)\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterManySepWalker\n        ],\n        separatorLookAheadFunc,\n        MANY_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterManySepWalker\n      )\n    }\n  }\n\n  repetitionSepSecondInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    separator: TokenType,\n    separatorLookAheadFunc: () => boolean,\n    action: GrammarAction<OUT>,\n    nextTerminalAfterWalker: typeof AbstractNextTerminalAfterProductionWalker\n  ): void {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator)\n      action.call(this)\n    }\n\n    // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    /* istanbul ignore else */\n    this.attemptInRepetitionRecovery(\n      this.repetitionSepSecondInternal,\n      [\n        prodOccurrence,\n        separator,\n        separatorLookAheadFunc,\n        action,\n        nextTerminalAfterWalker\n      ],\n      separatorLookAheadFunc,\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n      nextTerminalAfterWalker\n    )\n  }\n\n  doSingleRepetition(this: MixedInParser, action: Function): any {\n    const beforeIteration = this.getLexerPosition()\n    action.call(this)\n    const afterIteration = this.getLexerPosition()\n\n    // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n    return afterIteration > beforeIteration\n  }\n\n  orInternal<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number\n  ): T {\n    const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence)\n    const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF\n\n    const laFunc = this.getLaFuncFromCache(laKey)\n    const altIdxToTake = laFunc.call(this, alts)\n    if (altIdxToTake !== undefined) {\n      const chosenAlternative: any = alts[altIdxToTake]\n      return chosenAlternative.ALT.call(this)\n    }\n    this.raiseNoAltException(\n      occurrence,\n      (altsOrOpts as OrMethodOpts<unknown>).ERR_MSG\n    )\n  }\n\n  ruleFinallyStateUpdate(this: MixedInParser): void {\n    this.RULE_STACK.pop()\n    this.RULE_OCCURRENCE_STACK.pop()\n\n    // NOOP when cst is disabled\n    this.cstFinallyStateUpdate()\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      const firstRedundantTok = this.LA(1)\n      const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName()\n      })\n      this.SAVE_ERROR(new NotAllInputParsedException(errMsg, firstRedundantTok))\n    }\n  }\n\n  subruleInternal<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    idx: number,\n    options?: SubruleMethodOpts<ARGS>\n  ): R {\n    let ruleResult\n    try {\n      const args = options !== undefined ? options.ARGS : undefined\n      this.subruleIdx = idx\n      ruleResult = ruleToCall.apply(this, args)\n      this.cstPostNonTerminal(\n        ruleResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleToCall.ruleName\n      )\n      return ruleResult\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName)\n    }\n  }\n\n  subruleInternalError(\n    this: MixedInParser,\n    e: any,\n    options: SubruleMethodOpts<unknown[]> | undefined,\n    ruleName: string\n  ): void {\n    if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(\n        e.partialCstResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleName\n      )\n\n      delete e.partialCstResult\n    }\n    throw e\n  }\n\n  consumeInternal(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    options: ConsumeMethodOpts | undefined\n  ): IToken {\n    let consumedToken!: IToken\n    try {\n      const nextToken = this.LA(1)\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken()\n        consumedToken = nextToken\n      } else {\n        this.consumeInternalError(tokType, nextToken, options)\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(\n        tokType,\n        idx,\n        eFromConsumption\n      )\n    }\n\n    this.cstPostTerminal(\n      options !== undefined && options.LABEL !== undefined\n        ? options.LABEL\n        : tokType.name,\n      consumedToken\n    )\n    return consumedToken\n  }\n\n  consumeInternalError(\n    this: MixedInParser,\n    tokType: TokenType,\n    nextToken: IToken,\n    options: ConsumeMethodOpts | undefined\n  ): void {\n    let msg\n    const previousToken = this.LA(0)\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName()\n      })\n    }\n    throw this.SAVE_ERROR(\n      new MismatchedTokenException(msg, nextToken, previousToken)\n    )\n  }\n\n  consumeInternalRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    eFromConsumption: Error\n  ): IToken {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (\n      this.recoveryEnabled &&\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n      eFromConsumption.name === \"MismatchedTokenException\" &&\n      !this.isBackTracking()\n    ) {\n      const follows = this.getFollowsForInRuleRecovery(<any>tokType, idx)\n      try {\n        return this.tryInRuleRecovery(<any>tokType, follows)\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption\n        } else {\n          throw eFromInRuleRecovery\n        }\n      }\n    } else {\n      throw eFromConsumption\n    }\n  }\n\n  saveRecogState(this: MixedInParser): IParserState {\n    // errors is a getter which will clone the errors array\n    const savedErrors = this.errors\n    const savedRuleStack = clone(this.RULE_STACK)\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK\n    }\n  }\n\n  reloadRecogState(this: MixedInParser, newState: IParserState) {\n    this.errors = newState.errors\n    this.importLexerState(newState.lexerState)\n    this.RULE_STACK = newState.RULE_STACK\n  }\n\n  ruleInvocationStateUpdate(\n    this: MixedInParser,\n    shortName: number,\n    fullName: string,\n    idxInCallingRule: number\n  ): void {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule)\n    this.RULE_STACK.push(shortName)\n    // NOOP when cst is disabled\n    this.cstInvocationStateUpdate(fullName)\n  }\n\n  isBackTracking(this: MixedInParser): boolean {\n    return this.isBackTrackingStack.length !== 0\n  }\n\n  getCurrRuleFullName(this: MixedInParser): string {\n    const shortName = this.getLastExplicitRuleShortName()\n    return this.shortRuleNameToFull[shortName]\n  }\n\n  shortRuleNameToFullName(this: MixedInParser, shortName: number) {\n    return this.shortRuleNameToFull[shortName]\n  }\n\n  public isAtEndOfInput(this: MixedInParser): boolean {\n    return this.tokenMatcher(this.LA(1), EOF)\n  }\n\n  public reset(this: MixedInParser): void {\n    this.resetLexerState()\n    this.subruleIdx = 0\n    this.isBackTrackingStack = []\n    this.errors = []\n    this.RULE_STACK = []\n    // TODO: extract a specific reset for TreeBuilder trait\n    this.CST_STACK = []\n    this.RULE_OCCURRENCE_STACK = []\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}