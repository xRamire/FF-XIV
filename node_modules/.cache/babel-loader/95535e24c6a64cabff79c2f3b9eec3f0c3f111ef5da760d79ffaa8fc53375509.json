{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GAstVisitor = void 0;\nvar model_1 = require(\"./model\");\nvar GAstVisitor = /** @class */function () {\n  function GAstVisitor() {}\n  GAstVisitor.prototype.visit = function (node) {\n    var nodeAny = node;\n    switch (nodeAny.constructor) {\n      case model_1.NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n      case model_1.Alternative:\n        return this.visitAlternative(nodeAny);\n      case model_1.Option:\n        return this.visitOption(nodeAny);\n      case model_1.RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n      case model_1.RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n      case model_1.RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n      case model_1.Repetition:\n        return this.visitRepetition(nodeAny);\n      case model_1.Alternation:\n        return this.visitAlternation(nodeAny);\n      case model_1.Terminal:\n        return this.visitTerminal(nodeAny);\n      case model_1.Rule:\n        return this.visitRule(nodeAny);\n      /* istanbul ignore next */\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  };\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitNonTerminal = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitAlternative = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitOption = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRepetition = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRepetitionMandatory = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRepetitionWithSeparator = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitAlternation = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitTerminal = function (node) {};\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  GAstVisitor.prototype.visitRule = function (node) {};\n  return GAstVisitor;\n}();\nexports.GAstVisitor = GAstVisitor;","map":{"version":3,"mappings":";;;;;;AAAA;AAcA;EAAA,wBA6DA;EA5DSA,2BAAK,GAAZ,UAAaC,IAAiB;IAC5B,IAAMC,OAAO,GAAQD,IAAI;IACzB,QAAQC,OAAO,CAACC,WAAW;MACzB,KAAKC,mBAAW;QACd,OAAO,IAAI,CAACC,gBAAgB,CAACH,OAAO,CAAC;MACvC,KAAKE,mBAAW;QACd,OAAO,IAAI,CAACE,gBAAgB,CAACJ,OAAO,CAAC;MACvC,KAAKE,cAAM;QACT,OAAO,IAAI,CAACG,WAAW,CAACL,OAAO,CAAC;MAClC,KAAKE,2BAAmB;QACtB,OAAO,IAAI,CAACI,wBAAwB,CAACN,OAAO,CAAC;MAC/C,KAAKE,wCAAgC;QACnC,OAAO,IAAI,CAACK,qCAAqC,CAACP,OAAO,CAAC;MAC5D,KAAKE,+BAAuB;QAC1B,OAAO,IAAI,CAACM,4BAA4B,CAACR,OAAO,CAAC;MACnD,KAAKE,kBAAU;QACb,OAAO,IAAI,CAACO,eAAe,CAACT,OAAO,CAAC;MACtC,KAAKE,mBAAW;QACd,OAAO,IAAI,CAACQ,gBAAgB,CAACV,OAAO,CAAC;MACvC,KAAKE,gBAAQ;QACX,OAAO,IAAI,CAACS,aAAa,CAACX,OAAO,CAAC;MACpC,KAAKE,YAAI;QACP,OAAO,IAAI,CAACU,SAAS,CAACZ,OAAO,CAAC;MAChC;MACA;QACE,MAAMa,KAAK,CAAC,sBAAsB,CAAC;IAAA;EAEzC,CAAC;EAED;EACOf,sCAAgB,GAAvB,UAAwBC,IAAiB,GAAQ,CAAC;EAElD;EACOD,sCAAgB,GAAvB,UAAwBC,IAAiB,GAAQ,CAAC;EAElD;EACOD,iCAAW,GAAlB,UAAmBC,IAAY,GAAQ,CAAC;EAExC;EACOD,qCAAe,GAAtB,UAAuBC,IAAgB,GAAQ,CAAC;EAEhD;EACOD,8CAAwB,GAA/B,UAAgCC,IAAyB,GAAQ,CAAC;EAElE;EACOD,2DAAqC,GAA5C,UACEC,IAAsC,GAChC,CAAC;EAET;EACOD,kDAA4B,GAAnC,UAAoCC,IAA6B,GAAQ,CAAC;EAE1E;EACOD,sCAAgB,GAAvB,UAAwBC,IAAiB,GAAQ,CAAC;EAElD;EACOD,mCAAa,GAApB,UAAqBC,IAAc,GAAQ,CAAC;EAE5C;EACOD,+BAAS,GAAhB,UAAiBC,IAAU,GAAQ,CAAC;EACtC,kBAAC;AAAD,CAAC,EA7DD;AAAsBe","names":["GAstVisitor","node","nodeAny","constructor","model_1","visitNonTerminal","visitAlternative","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","Error","exports"],"sources":["/Users/desarrollo/Desktop/free/node_modules/@chevrotain/gast/src/visitor.ts"],"sourcesContent":["import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal\n} from \"./model\"\nimport { IProduction } from \"@chevrotain/types\"\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny)\n      case Alternative:\n        return this.visitAlternative(nodeAny)\n      case Option:\n        return this.visitOption(nodeAny)\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny)\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny)\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny)\n      case Repetition:\n        return this.visitRepetition(nodeAny)\n      case Alternation:\n        return this.visitAlternation(nodeAny)\n      case Terminal:\n        return this.visitTerminal(nodeAny)\n      case Rule:\n        return this.visitRule(nodeAny)\n      /* istanbul ignore next */\n      default:\n        throw Error(\"non exhaustive match\")\n    }\n  }\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitAlternative(node: Alternative): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitOption(node: Option): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetition(node: Repetition): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator\n  ): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitAlternation(node: Alternation): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitTerminal(node: Terminal): any {}\n\n  /* istanbul ignore next - testing the fact a NOOP function exists is non-trivial  */\n  public visitRule(node: Rule): any {}\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}