{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, BufferAttribute, BufferGeometry } from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\nimport { mergeVertices } from '../utils/BufferGeometryUtils.js';\nclass EdgeSplitModifier {\n  constructor() {\n    var _this = this;\n    _defineProperty(this, \"A\", new Vector3());\n    _defineProperty(this, \"B\", new Vector3());\n    _defineProperty(this, \"C\", new Vector3());\n    _defineProperty(this, \"positions\", []);\n    _defineProperty(this, \"normals\", new Float32Array());\n    _defineProperty(this, \"indexes\", []);\n    _defineProperty(this, \"pointToIndexMap\", []);\n    _defineProperty(this, \"splitIndexes\", []);\n    _defineProperty(this, \"oldNormals\", []);\n    _defineProperty(this, \"computeNormals\", () => {\n      this.normals = new Float32Array(this.indexes.length * 3);\n      for (let i = 0; i < this.indexes.length; i += 3) {\n        let index = this.indexes[i];\n        this.A.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 1];\n        this.B.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 2];\n        this.C.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        this.C.sub(this.B);\n        this.A.sub(this.B);\n        const normal = this.C.cross(this.A).normalize();\n        for (let j = 0; j < 3; j++) {\n          this.normals[3 * (i + j)] = normal.x;\n          this.normals[3 * (i + j) + 1] = normal.y;\n          this.normals[3 * (i + j) + 2] = normal.z;\n        }\n      }\n    });\n    _defineProperty(this, \"mapPositionsToIndexes\", () => {\n      this.pointToIndexMap = Array(this.positions.length / 3);\n      for (let i = 0; i < this.indexes.length; i++) {\n        const index = this.indexes[i];\n        if (this.pointToIndexMap[index] == null) {\n          this.pointToIndexMap[index] = [];\n        }\n        this.pointToIndexMap[index].push(i);\n      }\n    });\n    _defineProperty(this, \"edgeSplitToGroups\", (indexes, cutOff, firstIndex) => {\n      this.A.set(this.normals[3 * firstIndex], this.normals[3 * firstIndex + 1], this.normals[3 * firstIndex + 2]).normalize();\n      const result = {\n        splitGroup: [],\n        currentGroup: [firstIndex]\n      };\n      for (let j of indexes) {\n        if (j !== firstIndex) {\n          this.B.set(this.normals[3 * j], this.normals[3 * j + 1], this.normals[3 * j + 2]).normalize();\n          if (this.B.dot(this.A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n      return result;\n    });\n    _defineProperty(this, \"edgeSplit\", function (indexes, cutOff) {\n      let original = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      if (indexes.length === 0) return;\n      const groupResults = [];\n      for (let index of indexes) {\n        groupResults.push(_this.edgeSplitToGroups(indexes, cutOff, index));\n      }\n      let result = groupResults[0];\n      for (let groupResult of groupResults) {\n        if (groupResult.currentGroup.length > result.currentGroup.length) {\n          result = groupResult;\n        }\n      }\n      if (original != null) {\n        _this.splitIndexes.push({\n          original,\n          indexes: result.currentGroup\n        });\n      }\n      if (result.splitGroup.length) {\n        _this.edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n      }\n    });\n    _defineProperty(this, \"modify\", function (geometry, cutOffAngle) {\n      let tryKeepNormals = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      let hadNormals = false;\n      if (geometry.attributes.normal) {\n        hadNormals = true;\n        geometry = geometry.clone();\n        if (tryKeepNormals === true && geometry.index !== null) {\n          _this.oldNormals = geometry.attributes.normal.array;\n        }\n        geometry.deleteAttribute('normal');\n      }\n      if (geometry.index == null) {\n        if (BufferGeometryUtils === undefined) {\n          throw 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\n        }\n        geometry = mergeVertices(geometry);\n      }\n      _this.indexes = geometry.index.array;\n      _this.positions = geometry.getAttribute('position').array;\n      _this.computeNormals();\n      _this.mapPositionsToIndexes();\n      _this.splitIndexes = [];\n      for (let vertexIndexes of _this.pointToIndexMap) {\n        _this.edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 0.001);\n      }\n      const newAttributes = {};\n      for (let name of Object.keys(geometry.attributes)) {\n        const oldAttribute = geometry.attributes[name]; // @ts-ignore\n\n        const newArray = new oldAttribute.array.constructor((_this.indexes.length + _this.splitIndexes.length) * oldAttribute.itemSize);\n        newArray.set(oldAttribute.array);\n        newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n      }\n      const newIndexes = new Uint32Array(_this.indexes.length);\n      newIndexes.set(_this.indexes);\n      for (let i = 0; i < _this.splitIndexes.length; i++) {\n        const split = _this.splitIndexes[i];\n        const index = _this.indexes[split.original];\n        for (let attribute of Object.values(newAttributes)) {\n          for (let j = 0; j < attribute.itemSize; j++) {\n            // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n            attribute.array[(_this.indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n          }\n        }\n        for (let j of split.indexes) {\n          newIndexes[j] = _this.indexes.length + i;\n        }\n      }\n      geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(newIndexes, 1));\n      for (let name of Object.keys(newAttributes)) {\n        geometry.setAttribute(name, newAttributes[name]);\n      }\n      if (hadNormals) {\n        geometry.computeVertexNormals();\n        if (_this.oldNormals !== null) {\n          const changedNormals = new Array(_this.oldNormals.length / 3).fill(false);\n          for (let splitData of _this.splitIndexes) changedNormals[splitData.original] = true;\n          for (let i = 0; i < changedNormals.length; i++) {\n            if (changedNormals[i] === false) {\n              for (let j = 0; j < 3; j++) {\n                // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n                geometry.attributes.normal.array[3 * i + j] = _this.oldNormals[3 * i + j];\n              }\n            }\n          }\n        }\n      }\n      return geometry;\n    });\n  }\n}\nexport { EdgeSplitModifier };","map":{"version":3,"names":["_defineProperty","Vector3","BufferAttribute","BufferGeometry","BufferGeometryUtils","mergeVertices","EdgeSplitModifier","constructor","Float32Array","normals","indexes","length","i","index","A","set","positions","B","C","sub","normal","cross","normalize","j","x","y","z","pointToIndexMap","Array","push","cutOff","firstIndex","result","splitGroup","currentGroup","dot","original","groupResults","edgeSplitToGroups","groupResult","splitIndexes","edgeSplit","geometry","cutOffAngle","tryKeepNormals","hadNormals","attributes","clone","oldNormals","array","deleteAttribute","undefined","getAttribute","computeNormals","mapPositionsToIndexes","vertexIndexes","Math","cos","newAttributes","name","Object","keys","oldAttribute","newArray","itemSize","normalized","newIndexes","Uint32Array","split","attribute","values","setIndex","setAttribute","computeVertexNormals","changedNormals","fill","splitData"],"sources":["/Users/desarrollo/Desktop/free/node_modules/three-stdlib/modifiers/EdgeSplitModifier.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Vector3, BufferAttribute, BufferGeometry } from 'three';\nimport * as BufferGeometryUtils from '../utils/BufferGeometryUtils.js';\nimport { mergeVertices } from '../utils/BufferGeometryUtils.js';\n\nclass EdgeSplitModifier {\n  constructor() {\n    _defineProperty(this, \"A\", new Vector3());\n\n    _defineProperty(this, \"B\", new Vector3());\n\n    _defineProperty(this, \"C\", new Vector3());\n\n    _defineProperty(this, \"positions\", []);\n\n    _defineProperty(this, \"normals\", new Float32Array());\n\n    _defineProperty(this, \"indexes\", []);\n\n    _defineProperty(this, \"pointToIndexMap\", []);\n\n    _defineProperty(this, \"splitIndexes\", []);\n\n    _defineProperty(this, \"oldNormals\", []);\n\n    _defineProperty(this, \"computeNormals\", () => {\n      this.normals = new Float32Array(this.indexes.length * 3);\n\n      for (let i = 0; i < this.indexes.length; i += 3) {\n        let index = this.indexes[i];\n        this.A.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 1];\n        this.B.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        index = this.indexes[i + 2];\n        this.C.set(this.positions[3 * index], this.positions[3 * index + 1], this.positions[3 * index + 2]);\n        this.C.sub(this.B);\n        this.A.sub(this.B);\n        const normal = this.C.cross(this.A).normalize();\n\n        for (let j = 0; j < 3; j++) {\n          this.normals[3 * (i + j)] = normal.x;\n          this.normals[3 * (i + j) + 1] = normal.y;\n          this.normals[3 * (i + j) + 2] = normal.z;\n        }\n      }\n    });\n\n    _defineProperty(this, \"mapPositionsToIndexes\", () => {\n      this.pointToIndexMap = Array(this.positions.length / 3);\n\n      for (let i = 0; i < this.indexes.length; i++) {\n        const index = this.indexes[i];\n\n        if (this.pointToIndexMap[index] == null) {\n          this.pointToIndexMap[index] = [];\n        }\n\n        this.pointToIndexMap[index].push(i);\n      }\n    });\n\n    _defineProperty(this, \"edgeSplitToGroups\", (indexes, cutOff, firstIndex) => {\n      this.A.set(this.normals[3 * firstIndex], this.normals[3 * firstIndex + 1], this.normals[3 * firstIndex + 2]).normalize();\n      const result = {\n        splitGroup: [],\n        currentGroup: [firstIndex]\n      };\n\n      for (let j of indexes) {\n        if (j !== firstIndex) {\n          this.B.set(this.normals[3 * j], this.normals[3 * j + 1], this.normals[3 * j + 2]).normalize();\n\n          if (this.B.dot(this.A) < cutOff) {\n            result.splitGroup.push(j);\n          } else {\n            result.currentGroup.push(j);\n          }\n        }\n      }\n\n      return result;\n    });\n\n    _defineProperty(this, \"edgeSplit\", (indexes, cutOff, original = null) => {\n      if (indexes.length === 0) return;\n      const groupResults = [];\n\n      for (let index of indexes) {\n        groupResults.push(this.edgeSplitToGroups(indexes, cutOff, index));\n      }\n\n      let result = groupResults[0];\n\n      for (let groupResult of groupResults) {\n        if (groupResult.currentGroup.length > result.currentGroup.length) {\n          result = groupResult;\n        }\n      }\n\n      if (original != null) {\n        this.splitIndexes.push({\n          original,\n          indexes: result.currentGroup\n        });\n      }\n\n      if (result.splitGroup.length) {\n        this.edgeSplit(result.splitGroup, cutOff, original || result.currentGroup[0]);\n      }\n    });\n\n    _defineProperty(this, \"modify\", (geometry, cutOffAngle, tryKeepNormals = true) => {\n      let hadNormals = false;\n\n      if (geometry.attributes.normal) {\n        hadNormals = true;\n        geometry = geometry.clone();\n\n        if (tryKeepNormals === true && geometry.index !== null) {\n          this.oldNormals = geometry.attributes.normal.array;\n        }\n\n        geometry.deleteAttribute('normal');\n      }\n\n      if (geometry.index == null) {\n        if (BufferGeometryUtils === undefined) {\n          throw 'THREE.EdgeSplitModifier relies on BufferGeometryUtils';\n        }\n\n        geometry = mergeVertices(geometry);\n      }\n\n      this.indexes = geometry.index.array;\n      this.positions = geometry.getAttribute('position').array;\n      this.computeNormals();\n      this.mapPositionsToIndexes();\n      this.splitIndexes = [];\n\n      for (let vertexIndexes of this.pointToIndexMap) {\n        this.edgeSplit(vertexIndexes, Math.cos(cutOffAngle) - 0.001);\n      }\n\n      const newAttributes = {};\n\n      for (let name of Object.keys(geometry.attributes)) {\n        const oldAttribute = geometry.attributes[name]; // @ts-ignore\n\n        const newArray = new oldAttribute.array.constructor((this.indexes.length + this.splitIndexes.length) * oldAttribute.itemSize);\n        newArray.set(oldAttribute.array);\n        newAttributes[name] = new BufferAttribute(newArray, oldAttribute.itemSize, oldAttribute.normalized);\n      }\n\n      const newIndexes = new Uint32Array(this.indexes.length);\n      newIndexes.set(this.indexes);\n\n      for (let i = 0; i < this.splitIndexes.length; i++) {\n        const split = this.splitIndexes[i];\n        const index = this.indexes[split.original];\n\n        for (let attribute of Object.values(newAttributes)) {\n          for (let j = 0; j < attribute.itemSize; j++) {\n            // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n            attribute.array[(this.indexes.length + i) * attribute.itemSize + j] = attribute.array[index * attribute.itemSize + j];\n          }\n        }\n\n        for (let j of split.indexes) {\n          newIndexes[j] = this.indexes.length + i;\n        }\n      }\n\n      geometry = new BufferGeometry();\n      geometry.setIndex(new BufferAttribute(newIndexes, 1));\n\n      for (let name of Object.keys(newAttributes)) {\n        geometry.setAttribute(name, newAttributes[name]);\n      }\n\n      if (hadNormals) {\n        geometry.computeVertexNormals();\n\n        if (this.oldNormals !== null) {\n          const changedNormals = new Array(this.oldNormals.length / 3).fill(false);\n\n          for (let splitData of this.splitIndexes) changedNormals[splitData.original] = true;\n\n          for (let i = 0; i < changedNormals.length; i++) {\n            if (changedNormals[i] === false) {\n              for (let j = 0; j < 3; j++) {\n                // @ts-expect-error ArrayLike can't be mutated, but this works – https://github.com/three-types/three-ts-types/issues/35\n                geometry.attributes.normal.array[3 * i + j] = this.oldNormals[3 * i + j];\n              }\n            }\n          }\n        }\n      }\n\n      return geometry;\n    });\n  }\n\n}\n\nexport { EdgeSplitModifier };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}