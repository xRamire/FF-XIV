{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrorHandler = void 0;\nvar exceptions_public_1 = require(\"../../exceptions_public\");\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\nvar lookahead_1 = require(\"../../grammar/lookahead\");\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible for runtime parsing errors.\n */\nvar ErrorHandler = /** @class */function () {\n  function ErrorHandler() {}\n  ErrorHandler.prototype.initErrorHandler = function (config) {\n    this._errors = [];\n    this.errorMessageProvider = (0, has_1.default)(config, \"errorMessageProvider\") ? config.errorMessageProvider // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  };\n  ErrorHandler.prototype.SAVE_ERROR = function (error) {\n    if ((0, exceptions_public_1.isRecognitionException)(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: (0, clone_1.default)(this.RULE_OCCURRENCE_STACK)\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\"Trying to save an Error which is not a RecognitionException\");\n    }\n  };\n  Object.defineProperty(ErrorHandler.prototype, \"errors\", {\n    get: function () {\n      return (0, clone_1.default)(this._errors);\n    },\n    set: function (newErrors) {\n      this._errors = newErrors;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  // TODO: consider caching the error message computed information\n  ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName];\n    var lookAheadPathsPerAlternative = (0, lookahead_1.getLookaheadPathsForOptionalProd)(occurrence, ruleGrammar, prodType, this.maxLookahead);\n    var insideProdPaths = lookAheadPathsPerAlternative[0];\n    var actualTokens = [];\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    var msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName\n    });\n    throw this.SAVE_ERROR(new exceptions_public_1.EarlyExitException(msg, this.LA(1), this.LA(0)));\n  };\n  // TODO: consider caching the error message computed information\n  ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {\n    var ruleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    var lookAheadPathsPerAlternative = (0, lookahead_1.getLookaheadPathsForOr)(occurrence, ruleGrammar, this.maxLookahead);\n    var actualTokens = [];\n    for (var i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    var previousToken = this.LA(0);\n    var errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName()\n    });\n    throw this.SAVE_ERROR(new exceptions_public_1.NoViableAltException(errMsg, this.LA(1), previousToken));\n  };\n  return ErrorHandler;\n}();\nexports.ErrorHandler = ErrorHandler;","map":{"version":3,"mappings":"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","names":["ErrorHandler","config","_errors","errorMessageProvider","parser_1","error","context","ruleStack","getHumanReadableRuleStack","ruleOccurrenceStack","RULE_OCCURRENCE_STACK","push","Error","Object","newErrors","occurrence","prodType","userDefinedErrMsg","ruleName","getCurrRuleFullName","ruleGrammar","getGAstProductions","lookAheadPathsPerAlternative","maxLookahead","insideProdPaths","actualTokens","i","LA","msg","buildEarlyExitMessage","expectedIterationPaths","actual","previous","customUserDescription","SAVE_ERROR","exceptions_public_1","errMsgTypes","previousToken","errMsg","buildNoViableAltMessage","expectedPathsPerAlt","exports"],"sources":["/Users/desarrollo/Desktop/free/node_modules/chevrotain/src/parse/parser/traits/error_handler.ts"],"sourcesContent":["import {\n  IParserConfig,\n  IParserErrorMessageProvider,\n  IRecognitionException\n} from \"@chevrotain/types\"\nimport {\n  EarlyExitException,\n  isRecognitionException,\n  NoViableAltException\n} from \"../../exceptions_public\"\nimport has from \"lodash/has\"\nimport clone from \"lodash/clone\"\nimport {\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  PROD_TYPE\n} from \"../../grammar/lookahead\"\nimport { MixedInParser } from \"./parser_traits\"\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\"\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n  _errors: IRecognitionException[]\n  errorMessageProvider: IParserErrorMessageProvider\n\n  initErrorHandler(config: IParserConfig) {\n    this._errors = []\n    this.errorMessageProvider = has(config, \"errorMessageProvider\")\n      ? (config.errorMessageProvider as IParserErrorMessageProvider) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.errorMessageProvider\n  }\n\n  SAVE_ERROR(\n    this: MixedInParser,\n    error: IRecognitionException\n  ): IRecognitionException {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK)\n      }\n      this._errors.push(error)\n      return error\n    } else {\n      throw Error(\"Trying to save an Error which is not a RecognitionException\")\n    }\n  }\n\n  get errors(): IRecognitionException[] {\n    return clone(this._errors)\n  }\n\n  set errors(newErrors: IRecognitionException[]) {\n    this._errors = newErrors\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseEarlyExitException(\n    this: MixedInParser,\n    occurrence: number,\n    prodType: PROD_TYPE,\n    userDefinedErrMsg: string | undefined\n  ): never {\n    const ruleName = this.getCurrRuleFullName()\n    const ruleGrammar = this.getGAstProductions()[ruleName]\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n      occurrence,\n      ruleGrammar,\n      prodType,\n      this.maxLookahead\n    )\n    const insideProdPaths = lookAheadPathsPerAlternative[0]\n    const actualTokens = []\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i))\n    }\n    const msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName\n    })\n\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)))\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseNoAltException(\n    this: MixedInParser,\n    occurrence: number,\n    errMsgTypes: string | undefined\n  ): never {\n    const ruleName = this.getCurrRuleFullName()\n    const ruleGrammar = this.getGAstProductions()[ruleName]\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOr(\n      occurrence,\n      ruleGrammar,\n      this.maxLookahead\n    )\n\n    const actualTokens = []\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i))\n    }\n    const previousToken = this.LA(0)\n\n    const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName()\n    })\n\n    throw this.SAVE_ERROR(\n      new NoViableAltException(errMsg, this.LA(1), previousToken)\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}