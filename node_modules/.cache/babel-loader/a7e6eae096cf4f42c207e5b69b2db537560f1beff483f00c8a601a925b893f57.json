{"ast":null,"code":"import CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\nclass FunctionNode extends CodeNode {\n  constructor() {\n    let code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    super(code);\n    this.keywords = {};\n  }\n  getNodeType(builder) {\n    return this.getNodeFunction(builder).type;\n  }\n  getInputs(builder) {\n    return this.getNodeFunction(builder).inputs;\n  }\n  getNodeFunction(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    let nodeFunction = nodeData.nodeFunction;\n    if (nodeFunction === undefined) {\n      nodeFunction = builder.parser.parseFunction(this.code);\n      nodeData.nodeFunction = nodeFunction;\n    }\n    return nodeFunction;\n  }\n  call() {\n    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new FunctionCallNode(this, parameters);\n  }\n  generate(builder, output) {\n    super.generate(builder);\n    const nodeFunction = this.getNodeFunction(builder);\n    const name = nodeFunction.name;\n    const type = nodeFunction.type;\n    const nodeCode = builder.getCodeFromNode(this, type);\n    if (name !== '') {\n      // use a custom property name\n      nodeCode.name = name;\n    }\n    const propertyName = builder.getPropertyName(nodeCode);\n    let code = this.getNodeFunction(builder).getCode(propertyName);\n    const keywords = this.keywords;\n    const keywordsProperties = Object.keys(keywords);\n    if (keywordsProperties.length > 0) {\n      for (const property of keywordsProperties) {\n        const propertyRegExp = new RegExp(`\\\\b${property}\\\\b`, 'g');\n        const nodeProperty = keywords[property].build(builder, 'property');\n        code = code.replace(propertyRegExp, nodeProperty);\n      }\n    }\n    nodeCode.code = code;\n    if (output === 'property') {\n      return propertyName;\n    } else {\n      return builder.format(`${propertyName}()`, type, output);\n    }\n  }\n}\nexport default FunctionNode;","map":{"version":3,"names":["CodeNode","FunctionCallNode","FunctionNode","constructor","code","keywords","getNodeType","builder","getNodeFunction","type","getInputs","inputs","nodeData","getDataFromNode","nodeFunction","undefined","parser","parseFunction","call","parameters","generate","output","name","nodeCode","getCodeFromNode","propertyName","getPropertyName","getCode","keywordsProperties","Object","keys","length","property","propertyRegExp","RegExp","nodeProperty","build","replace","format"],"sources":["/Users/desarrollo/Desktop/free/node_modules/three-stdlib/nodes/core/FunctionNode.js"],"sourcesContent":["import CodeNode from './CodeNode.js';\nimport FunctionCallNode from './FunctionCallNode.js';\n\nclass FunctionNode extends CodeNode {\n  constructor(code = '') {\n    super(code);\n    this.keywords = {};\n  }\n\n  getNodeType(builder) {\n    return this.getNodeFunction(builder).type;\n  }\n\n  getInputs(builder) {\n    return this.getNodeFunction(builder).inputs;\n  }\n\n  getNodeFunction(builder) {\n    const nodeData = builder.getDataFromNode(this);\n    let nodeFunction = nodeData.nodeFunction;\n\n    if (nodeFunction === undefined) {\n      nodeFunction = builder.parser.parseFunction(this.code);\n      nodeData.nodeFunction = nodeFunction;\n    }\n\n    return nodeFunction;\n  }\n\n  call(parameters = {}) {\n    return new FunctionCallNode(this, parameters);\n  }\n\n  generate(builder, output) {\n    super.generate(builder);\n    const nodeFunction = this.getNodeFunction(builder);\n    const name = nodeFunction.name;\n    const type = nodeFunction.type;\n    const nodeCode = builder.getCodeFromNode(this, type);\n\n    if (name !== '') {\n      // use a custom property name\n      nodeCode.name = name;\n    }\n\n    const propertyName = builder.getPropertyName(nodeCode);\n    let code = this.getNodeFunction(builder).getCode(propertyName);\n    const keywords = this.keywords;\n    const keywordsProperties = Object.keys(keywords);\n\n    if (keywordsProperties.length > 0) {\n      for (const property of keywordsProperties) {\n        const propertyRegExp = new RegExp(`\\\\b${property}\\\\b`, 'g');\n        const nodeProperty = keywords[property].build(builder, 'property');\n        code = code.replace(propertyRegExp, nodeProperty);\n      }\n    }\n\n    nodeCode.code = code;\n\n    if (output === 'property') {\n      return propertyName;\n    } else {\n      return builder.format(`${propertyName}()`, type, output);\n    }\n  }\n\n}\n\nexport default FunctionNode;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,eAAe;AACpC,OAAOC,gBAAgB,MAAM,uBAAuB;AAEpD,MAAMC,YAAY,SAASF,QAAQ,CAAC;EAClCG,WAAW,GAAY;IAAA,IAAXC,IAAI,uEAAG,EAAE;IACnB,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;EACpB;EAEAC,WAAW,CAACC,OAAO,EAAE;IACnB,OAAO,IAAI,CAACC,eAAe,CAACD,OAAO,CAAC,CAACE,IAAI;EAC3C;EAEAC,SAAS,CAACH,OAAO,EAAE;IACjB,OAAO,IAAI,CAACC,eAAe,CAACD,OAAO,CAAC,CAACI,MAAM;EAC7C;EAEAH,eAAe,CAACD,OAAO,EAAE;IACvB,MAAMK,QAAQ,GAAGL,OAAO,CAACM,eAAe,CAAC,IAAI,CAAC;IAC9C,IAAIC,YAAY,GAAGF,QAAQ,CAACE,YAAY;IAExC,IAAIA,YAAY,KAAKC,SAAS,EAAE;MAC9BD,YAAY,GAAGP,OAAO,CAACS,MAAM,CAACC,aAAa,CAAC,IAAI,CAACb,IAAI,CAAC;MACtDQ,QAAQ,CAACE,YAAY,GAAGA,YAAY;IACtC;IAEA,OAAOA,YAAY;EACrB;EAEAI,IAAI,GAAkB;IAAA,IAAjBC,UAAU,uEAAG,CAAC,CAAC;IAClB,OAAO,IAAIlB,gBAAgB,CAAC,IAAI,EAAEkB,UAAU,CAAC;EAC/C;EAEAC,QAAQ,CAACb,OAAO,EAAEc,MAAM,EAAE;IACxB,KAAK,CAACD,QAAQ,CAACb,OAAO,CAAC;IACvB,MAAMO,YAAY,GAAG,IAAI,CAACN,eAAe,CAACD,OAAO,CAAC;IAClD,MAAMe,IAAI,GAAGR,YAAY,CAACQ,IAAI;IAC9B,MAAMb,IAAI,GAAGK,YAAY,CAACL,IAAI;IAC9B,MAAMc,QAAQ,GAAGhB,OAAO,CAACiB,eAAe,CAAC,IAAI,EAAEf,IAAI,CAAC;IAEpD,IAAIa,IAAI,KAAK,EAAE,EAAE;MACf;MACAC,QAAQ,CAACD,IAAI,GAAGA,IAAI;IACtB;IAEA,MAAMG,YAAY,GAAGlB,OAAO,CAACmB,eAAe,CAACH,QAAQ,CAAC;IACtD,IAAInB,IAAI,GAAG,IAAI,CAACI,eAAe,CAACD,OAAO,CAAC,CAACoB,OAAO,CAACF,YAAY,CAAC;IAC9D,MAAMpB,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,MAAMuB,kBAAkB,GAAGC,MAAM,CAACC,IAAI,CAACzB,QAAQ,CAAC;IAEhD,IAAIuB,kBAAkB,CAACG,MAAM,GAAG,CAAC,EAAE;MACjC,KAAK,MAAMC,QAAQ,IAAIJ,kBAAkB,EAAE;QACzC,MAAMK,cAAc,GAAG,IAAIC,MAAM,CAAE,MAAKF,QAAS,KAAI,EAAE,GAAG,CAAC;QAC3D,MAAMG,YAAY,GAAG9B,QAAQ,CAAC2B,QAAQ,CAAC,CAACI,KAAK,CAAC7B,OAAO,EAAE,UAAU,CAAC;QAClEH,IAAI,GAAGA,IAAI,CAACiC,OAAO,CAACJ,cAAc,EAAEE,YAAY,CAAC;MACnD;IACF;IAEAZ,QAAQ,CAACnB,IAAI,GAAGA,IAAI;IAEpB,IAAIiB,MAAM,KAAK,UAAU,EAAE;MACzB,OAAOI,YAAY;IACrB,CAAC,MAAM;MACL,OAAOlB,OAAO,CAAC+B,MAAM,CAAE,GAAEb,YAAa,IAAG,EAAEhB,IAAI,EAAEY,MAAM,CAAC;IAC1D;EACF;AAEF;AAEA,eAAenB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}