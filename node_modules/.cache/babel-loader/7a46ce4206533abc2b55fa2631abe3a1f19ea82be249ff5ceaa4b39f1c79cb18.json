{"ast":null,"code":"import UniformNode from '../core/UniformNode.js';\nimport UVNode from './UVNode.js';\nclass TextureNode extends UniformNode {\n  constructor(value) {\n    let uvNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new UVNode();\n    let biasNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super(value, 'vec4');\n    this.uvNode = uvNode;\n    this.biasNode = biasNode;\n  }\n  getUniformHash() {\n    return this.value.uuid;\n  }\n  getInputType() {\n    return 'texture';\n  }\n  generate(builder, output) {\n    const texture = this.value;\n    if (!texture || texture.isTexture !== true) {\n      throw new Error('TextureNode: Need a three.js texture.');\n    }\n    const textureProperty = super.generate(builder, 'texture');\n    if (output === 'sampler') {\n      return textureProperty + '_sampler';\n    } else if (builder.isReference(output)) {\n      return textureProperty;\n    } else {\n      const nodeData = builder.getDataFromNode(this);\n      let snippet = nodeData.snippet;\n      if (snippet === undefined) {\n        const uvSnippet = this.uvNode.build(builder, 'vec2');\n        const biasNode = this.biasNode;\n        if (biasNode !== null) {\n          const biasSnippet = biasNode.build(builder, 'float');\n          snippet = builder.getTextureBias(textureProperty, uvSnippet, biasSnippet);\n        } else {\n          snippet = builder.getTexture(textureProperty, uvSnippet);\n        }\n        nodeData.snippet = snippet;\n      }\n      return builder.format(snippet, 'vec4', output);\n    }\n  }\n  serialize(data) {\n    super.serialize(data);\n    data.value = this.value.toJSON(data.meta).uuid;\n  }\n  deserialize(data) {\n    super.deserialize(data);\n    this.value = data.meta.textures[data.value];\n  }\n}\nTextureNode.prototype.isTextureNode = true;\nexport default TextureNode;","map":{"version":3,"names":["UniformNode","UVNode","TextureNode","constructor","value","uvNode","biasNode","getUniformHash","uuid","getInputType","generate","builder","output","texture","isTexture","Error","textureProperty","isReference","nodeData","getDataFromNode","snippet","undefined","uvSnippet","build","biasSnippet","getTextureBias","getTexture","format","serialize","data","toJSON","meta","deserialize","textures","prototype","isTextureNode"],"sources":["/Users/desarrollo/Desktop/free/node_modules/three-stdlib/nodes/accessors/TextureNode.js"],"sourcesContent":["import UniformNode from '../core/UniformNode.js';\nimport UVNode from './UVNode.js';\n\nclass TextureNode extends UniformNode {\n  constructor(value, uvNode = new UVNode(), biasNode = null) {\n    super(value, 'vec4');\n    this.uvNode = uvNode;\n    this.biasNode = biasNode;\n  }\n\n  getUniformHash() {\n    return this.value.uuid;\n  }\n\n  getInputType() {\n    return 'texture';\n  }\n\n  generate(builder, output) {\n    const texture = this.value;\n\n    if (!texture || texture.isTexture !== true) {\n      throw new Error('TextureNode: Need a three.js texture.');\n    }\n\n    const textureProperty = super.generate(builder, 'texture');\n\n    if (output === 'sampler') {\n      return textureProperty + '_sampler';\n    } else if (builder.isReference(output)) {\n      return textureProperty;\n    } else {\n      const nodeData = builder.getDataFromNode(this);\n      let snippet = nodeData.snippet;\n\n      if (snippet === undefined) {\n        const uvSnippet = this.uvNode.build(builder, 'vec2');\n        const biasNode = this.biasNode;\n\n        if (biasNode !== null) {\n          const biasSnippet = biasNode.build(builder, 'float');\n          snippet = builder.getTextureBias(textureProperty, uvSnippet, biasSnippet);\n        } else {\n          snippet = builder.getTexture(textureProperty, uvSnippet);\n        }\n\n        nodeData.snippet = snippet;\n      }\n\n      return builder.format(snippet, 'vec4', output);\n    }\n  }\n\n  serialize(data) {\n    super.serialize(data);\n    data.value = this.value.toJSON(data.meta).uuid;\n  }\n\n  deserialize(data) {\n    super.deserialize(data);\n    this.value = data.meta.textures[data.value];\n  }\n\n}\n\nTextureNode.prototype.isTextureNode = true;\n\nexport default TextureNode;\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,wBAAwB;AAChD,OAAOC,MAAM,MAAM,aAAa;AAEhC,MAAMC,WAAW,SAASF,WAAW,CAAC;EACpCG,WAAW,CAACC,KAAK,EAA0C;IAAA,IAAxCC,MAAM,uEAAG,IAAIJ,MAAM,EAAE;IAAA,IAAEK,QAAQ,uEAAG,IAAI;IACvD,KAAK,CAACF,KAAK,EAAE,MAAM,CAAC;IACpB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;EAEAC,cAAc,GAAG;IACf,OAAO,IAAI,CAACH,KAAK,CAACI,IAAI;EACxB;EAEAC,YAAY,GAAG;IACb,OAAO,SAAS;EAClB;EAEAC,QAAQ,CAACC,OAAO,EAAEC,MAAM,EAAE;IACxB,MAAMC,OAAO,GAAG,IAAI,CAACT,KAAK;IAE1B,IAAI,CAACS,OAAO,IAAIA,OAAO,CAACC,SAAS,KAAK,IAAI,EAAE;MAC1C,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;IAC1D;IAEA,MAAMC,eAAe,GAAG,KAAK,CAACN,QAAQ,CAACC,OAAO,EAAE,SAAS,CAAC;IAE1D,IAAIC,MAAM,KAAK,SAAS,EAAE;MACxB,OAAOI,eAAe,GAAG,UAAU;IACrC,CAAC,MAAM,IAAIL,OAAO,CAACM,WAAW,CAACL,MAAM,CAAC,EAAE;MACtC,OAAOI,eAAe;IACxB,CAAC,MAAM;MACL,MAAME,QAAQ,GAAGP,OAAO,CAACQ,eAAe,CAAC,IAAI,CAAC;MAC9C,IAAIC,OAAO,GAAGF,QAAQ,CAACE,OAAO;MAE9B,IAAIA,OAAO,KAAKC,SAAS,EAAE;QACzB,MAAMC,SAAS,GAAG,IAAI,CAACjB,MAAM,CAACkB,KAAK,CAACZ,OAAO,EAAE,MAAM,CAAC;QACpD,MAAML,QAAQ,GAAG,IAAI,CAACA,QAAQ;QAE9B,IAAIA,QAAQ,KAAK,IAAI,EAAE;UACrB,MAAMkB,WAAW,GAAGlB,QAAQ,CAACiB,KAAK,CAACZ,OAAO,EAAE,OAAO,CAAC;UACpDS,OAAO,GAAGT,OAAO,CAACc,cAAc,CAACT,eAAe,EAAEM,SAAS,EAAEE,WAAW,CAAC;QAC3E,CAAC,MAAM;UACLJ,OAAO,GAAGT,OAAO,CAACe,UAAU,CAACV,eAAe,EAAEM,SAAS,CAAC;QAC1D;QAEAJ,QAAQ,CAACE,OAAO,GAAGA,OAAO;MAC5B;MAEA,OAAOT,OAAO,CAACgB,MAAM,CAACP,OAAO,EAAE,MAAM,EAAER,MAAM,CAAC;IAChD;EACF;EAEAgB,SAAS,CAACC,IAAI,EAAE;IACd,KAAK,CAACD,SAAS,CAACC,IAAI,CAAC;IACrBA,IAAI,CAACzB,KAAK,GAAG,IAAI,CAACA,KAAK,CAAC0B,MAAM,CAACD,IAAI,CAACE,IAAI,CAAC,CAACvB,IAAI;EAChD;EAEAwB,WAAW,CAACH,IAAI,EAAE;IAChB,KAAK,CAACG,WAAW,CAACH,IAAI,CAAC;IACvB,IAAI,CAACzB,KAAK,GAAGyB,IAAI,CAACE,IAAI,CAACE,QAAQ,CAACJ,IAAI,CAACzB,KAAK,CAAC;EAC7C;AAEF;AAEAF,WAAW,CAACgC,SAAS,CAACC,aAAa,GAAG,IAAI;AAE1C,eAAejC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}