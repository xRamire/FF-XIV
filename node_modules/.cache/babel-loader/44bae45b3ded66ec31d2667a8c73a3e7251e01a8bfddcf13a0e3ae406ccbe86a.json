{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nextPossibleTokensAfter = exports.possiblePathsFrom = exports.NextTerminalAfterAtLeastOneSepWalker = exports.NextTerminalAfterAtLeastOneWalker = exports.NextTerminalAfterManySepWalker = exports.NextTerminalAfterManyWalker = exports.AbstractNextTerminalAfterProductionWalker = exports.NextAfterTokenWalker = exports.AbstractNextPossibleTokensWalker = void 0;\nvar rest_1 = require(\"./rest\");\nvar first_1 = __importDefault(require(\"lodash/first\"));\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nvar dropRight_1 = __importDefault(require(\"lodash/dropRight\"));\nvar drop_1 = __importDefault(require(\"lodash/drop\"));\nvar last_1 = __importDefault(require(\"lodash/last\"));\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\nvar first_2 = require(\"./first\");\nvar gast_1 = require(\"@chevrotain/gast\");\nvar AbstractNextPossibleTokensWalker = /** @class */function (_super) {\n  __extends(AbstractNextPossibleTokensWalker, _super);\n  function AbstractNextPossibleTokensWalker(topProd, path) {\n    var _this = _super.call(this) || this;\n    _this.topProd = topProd;\n    _this.path = path;\n    _this.possibleTokTypes = [];\n    _this.nextProductionName = \"\";\n    _this.nextProductionOccurrence = 0;\n    _this.found = false;\n    _this.isAtEndOfPath = false;\n    return _this;\n  }\n  AbstractNextPossibleTokensWalker.prototype.startWalking = function () {\n    this.found = false;\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    }\n    // immutable for the win\n    this.ruleStack = (0, clone_1.default)(this.path.ruleStack).reverse(); // intelij bug requires assertion\n    this.occurrenceStack = (0, clone_1.default)(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n    return this.possibleTokTypes;\n  };\n  AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {\n    if (prevRest === void 0) {\n      prevRest = [];\n    }\n    // stop scanning once we found the path\n    if (!this.found) {\n      _super.prototype.walk.call(this, prod, prevRest);\n    }\n  };\n  AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {\n    // found the next production, need to keep walking in it\n    if (refProd.referencedRule.name === this.nextProductionName && refProd.idx === this.nextProductionOccurrence) {\n      var fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, fullRest);\n    }\n  };\n  AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {\n    // need to consume the Terminal\n    if ((0, isEmpty_1.default)(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop();\n      this.nextProductionOccurrence = this.occurrenceStack.pop();\n    }\n  };\n  return AbstractNextPossibleTokensWalker;\n}(rest_1.RestWalker);\nexports.AbstractNextPossibleTokensWalker = AbstractNextPossibleTokensWalker;\nvar NextAfterTokenWalker = /** @class */function (_super) {\n  __extends(NextAfterTokenWalker, _super);\n  function NextAfterTokenWalker(topProd, path) {\n    var _this = _super.call(this, topProd, path) || this;\n    _this.path = path;\n    _this.nextTerminalName = \"\";\n    _this.nextTerminalOccurrence = 0;\n    _this.nextTerminalName = _this.path.lastTok.name;\n    _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;\n    return _this;\n  }\n  NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {\n    if (this.isAtEndOfPath && terminal.terminalType.name === this.nextTerminalName && terminal.idx === this.nextTerminalOccurrence && !this.found) {\n      var fullRest = currRest.concat(prevRest);\n      var restProd = new gast_1.Alternative({\n        definition: fullRest\n      });\n      this.possibleTokTypes = (0, first_2.first)(restProd);\n      this.found = true;\n    }\n  };\n  return NextAfterTokenWalker;\n}(AbstractNextPossibleTokensWalker);\nexports.NextAfterTokenWalker = NextAfterTokenWalker;\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nvar AbstractNextTerminalAfterProductionWalker = /** @class */function (_super) {\n  __extends(AbstractNextTerminalAfterProductionWalker, _super);\n  function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {\n    var _this = _super.call(this) || this;\n    _this.topRule = topRule;\n    _this.occurrence = occurrence;\n    _this.result = {\n      token: undefined,\n      occurrence: undefined,\n      isEndOfRule: undefined\n    };\n    return _this;\n  }\n  AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {\n    this.walk(this.topRule);\n    return this.result;\n  };\n  return AbstractNextTerminalAfterProductionWalker;\n}(rest_1.RestWalker);\nexports.AbstractNextTerminalAfterProductionWalker = AbstractNextTerminalAfterProductionWalker;\nvar NextTerminalAfterManyWalker = /** @class */function (_super) {\n  __extends(NextTerminalAfterManyWalker, _super);\n  function NextTerminalAfterManyWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    if (manyProd.idx === this.occurrence) {\n      var firstAfterMany = (0, first_1.default)(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n      if (firstAfterMany instanceof gast_1.Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);\n    }\n  };\n  return NextTerminalAfterManyWalker;\n}(AbstractNextTerminalAfterProductionWalker);\nexports.NextTerminalAfterManyWalker = NextTerminalAfterManyWalker;\nvar NextTerminalAfterManySepWalker = /** @class */function (_super) {\n  __extends(NextTerminalAfterManySepWalker, _super);\n  function NextTerminalAfterManySepWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    if (manySepProd.idx === this.occurrence) {\n      var firstAfterManySep = (0, first_1.default)(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n      if (firstAfterManySep instanceof gast_1.Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);\n    }\n  };\n  return NextTerminalAfterManySepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\nexports.NextTerminalAfterManySepWalker = NextTerminalAfterManySepWalker;\nvar NextTerminalAfterAtLeastOneWalker = /** @class */function (_super) {\n  __extends(NextTerminalAfterAtLeastOneWalker, _super);\n  function NextTerminalAfterAtLeastOneWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    if (atLeastOneProd.idx === this.occurrence) {\n      var firstAfterAtLeastOne = (0, first_1.default)(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n      if (firstAfterAtLeastOne instanceof gast_1.Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);\n    }\n  };\n  return NextTerminalAfterAtLeastOneWalker;\n}(AbstractNextTerminalAfterProductionWalker);\nexports.NextTerminalAfterAtLeastOneWalker = NextTerminalAfterAtLeastOneWalker;\n// TODO: reduce code duplication in the AfterWalkers\nvar NextTerminalAfterAtLeastOneSepWalker = /** @class */function (_super) {\n  __extends(NextTerminalAfterAtLeastOneSepWalker, _super);\n  function NextTerminalAfterAtLeastOneSepWalker() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      var firstAfterfirstAfterAtLeastOneSep = (0, first_1.default)(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n      if (firstAfterfirstAfterAtLeastOneSep instanceof gast_1.Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);\n    }\n  };\n  return NextTerminalAfterAtLeastOneSepWalker;\n}(AbstractNextTerminalAfterProductionWalker);\nexports.NextTerminalAfterAtLeastOneSepWalker = NextTerminalAfterAtLeastOneSepWalker;\nfunction possiblePathsFrom(targetDef, maxLength, currPath) {\n  if (currPath === void 0) {\n    currPath = [];\n  }\n  // avoid side effects\n  currPath = (0, clone_1.default)(currPath);\n  var result = [];\n  var i = 0;\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef) {\n    return nextDef.concat((0, drop_1.default)(targetDef, i + 1));\n  }\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition) {\n    var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);\n    return result.concat(alternatives);\n  }\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    var prod = targetDef[i];\n    /* istanbul ignore else */\n    if (prod instanceof gast_1.Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_1.NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_1.Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof gast_1.RepetitionMandatory) {\n      var newDef = prod.definition.concat([new gast_1.Repetition({\n        definition: prod.definition\n      })]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n      var newDef = [new gast_1.Alternative({\n        definition: prod.definition\n      }), new gast_1.Repetition({\n        definition: [new gast_1.Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_1.RepetitionWithSeparator) {\n      var newDef = prod.definition.concat([new gast_1.Repetition({\n        definition: [new gast_1.Terminal({\n          terminalType: prod.separator\n        })].concat(prod.definition)\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_1.Repetition) {\n      var newDef = prod.definition.concat([new gast_1.Repetition({\n        definition: prod.definition\n      })]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof gast_1.Alternation) {\n      (0, forEach_1.default)(prod.definition, function (currAlt) {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if ((0, isEmpty_1.default)(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof gast_1.Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n    i++;\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: (0, drop_1.default)(targetDef, i)\n  });\n  return result;\n}\nexports.possiblePathsFrom = possiblePathsFrom;\nfunction nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {\n  var EXIT_NON_TERMINAL = \"EXIT_NONE_TERMINAL\";\n  // to avoid creating a new Array each time.\n  var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  var EXIT_ALTERNATIVE = \"EXIT_ALTERNATIVE\";\n  var foundCompletePath = false;\n  var tokenVectorLength = tokenVector.length;\n  var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n  var result = [];\n  var possiblePaths = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: []\n  });\n  while (!(0, isEmpty_1.default)(possiblePaths)) {\n    var currPath = possiblePaths.pop();\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (foundCompletePath && (0, last_1.default)(possiblePaths).idx <= minimalAlternativesIndex) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n      continue;\n    }\n    var currDef = currPath.def;\n    var currIdx = currPath.idx;\n    var currRuleStack = currPath.ruleStack;\n    var currOccurrenceStack = currPath.occurrenceStack;\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if ((0, isEmpty_1.default)(currDef)) {\n      continue;\n    }\n    var prod = currDef[0];\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      var nextPath = {\n        idx: currIdx,\n        def: (0, drop_1.default)(currDef),\n        ruleStack: (0, dropRight_1.default)(currRuleStack),\n        occurrenceStack: (0, dropRight_1.default)(currOccurrenceStack)\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_1.Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        var nextIdx = currIdx + 1;\n        var actualToken = tokenVector[nextIdx];\n        if (tokMatcher(actualToken, prod.terminalType)) {\n          var nextPath = {\n            idx: nextIdx,\n            def: (0, drop_1.default)(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          };\n          possiblePaths.push(nextPath);\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof gast_1.NonTerminal) {\n      var newRuleStack = (0, clone_1.default)(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n      var newOccurrenceStack = (0, clone_1.default)(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n      var nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, (0, drop_1.default)(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_1.Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: (0, drop_1.default)(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat((0, drop_1.default)(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_1.RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var secondIteration = new gast_1.Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], (0, drop_1.default)(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      var separatorGast = new gast_1.Terminal({\n        terminalType: prod.separator\n      });\n      var secondIteration = new gast_1.Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([secondIteration], (0, drop_1.default)(currDef));\n      var nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof gast_1.RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: (0, drop_1.default)(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      var separatorGast = new gast_1.Terminal({\n        terminalType: prod.separator\n      });\n      var nthRepetition = new gast_1.Repetition({\n        definition: [separatorGast].concat(prod.definition),\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], (0, drop_1.default)(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_1.Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      var nextPathWithout = {\n        idx: currIdx,\n        def: (0, drop_1.default)(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      var nthRepetition = new gast_1.Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      });\n      var nextDef = prod.definition.concat([nthRepetition], (0, drop_1.default)(currDef));\n      var nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof gast_1.Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (var i = prod.definition.length - 1; i >= 0; i--) {\n        var currAlt = prod.definition[i];\n        var currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat((0, drop_1.default)(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof gast_1.Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat((0, drop_1.default)(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      });\n    } else if (prod instanceof gast_1.Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  return result;\n}\nexports.nextPossibleTokensAfter = nextPossibleTokensAfter;\nfunction expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {\n  var newRuleStack = (0, clone_1.default)(currRuleStack);\n  newRuleStack.push(topRule.name);\n  var newCurrOccurrenceStack = (0, clone_1.default)(currOccurrenceStack);\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1);\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack\n  };\n}","map":{"version":3,"mappings":"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","names":["__extends","topProd","path","_super","_this","AbstractNextPossibleTokensWalker","found","ruleStack","name","Error","reverse","occurrenceStack","pop","updateExpectedNext","walk","possibleTokTypes","prod","prevRest","refProd","currRest","referencedRule","nextProductionName","idx","nextProductionOccurrence","fullRest","concat","isAtEndOfPath","rest_1","exports","nextTerminalName","lastTok","nextTerminalOccurrence","lastTokOccurrence","NextAfterTokenWalker","terminal","terminalType","restProd","gast_1","definition","topRule","occurrence","token","undefined","isEndOfRule","AbstractNextTerminalAfterProductionWalker","result","NextTerminalAfterManyWalker","manyProd","firstAfterMany","walkMany","NextTerminalAfterManySepWalker","manySepProd","firstAfterManySep","walkManySep","NextTerminalAfterAtLeastOneWalker","atLeastOneProd","firstAfterAtLeastOne","walkAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","walkAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","currPath","i","remainingPathWith","nextDef","getAlternativesForProd","alternatives","length","newDef","separator","currAlt","push","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokenVector","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currIdx","currRuleStack","currOccurrenceStack","nextPath","nextIdx","actualToken","nextTokenType","nextTokenOccurrence","newRuleStack","nonTerminalName","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack"],"sources":["/Users/desarrollo/Desktop/free/node_modules/chevrotain/src/parse/grammar/interpreter.ts"],"sourcesContent":["import { RestWalker } from \"./rest\"\nimport _first from \"lodash/first\"\nimport isEmpty from \"lodash/isEmpty\"\nimport dropRight from \"lodash/dropRight\"\nimport drop from \"lodash/drop\"\nimport last from \"lodash/last\"\nimport forEach from \"lodash/forEach\"\nimport clone from \"lodash/clone\"\nimport { first } from \"./first\"\nimport { TokenMatcher } from \"../parser/parser\"\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal\n} from \"@chevrotain/gast\"\nimport {\n  IGrammarPath,\n  IProduction,\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType\n} from \"@chevrotain/types\"\n\nexport abstract class AbstractNextPossibleTokensWalker extends RestWalker {\n  protected possibleTokTypes: TokenType[] = []\n  protected ruleStack: string[]\n  protected occurrenceStack: number[]\n\n  protected nextProductionName = \"\"\n  protected nextProductionOccurrence = 0\n  protected found = false\n  protected isAtEndOfPath = false\n\n  constructor(protected topProd: Rule, protected path: IGrammarPath) {\n    super()\n  }\n\n  startWalking(): TokenType[] {\n    this.found = false\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\")\n    }\n\n    // immutable for the win\n    this.ruleStack = clone(this.path.ruleStack).reverse() // intelij bug requires assertion\n    this.occurrenceStack = clone(this.path.occurrenceStack).reverse() // intelij bug requires assertion\n\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop()\n    this.occurrenceStack.pop()\n\n    this.updateExpectedNext()\n    this.walk(this.topProd)\n\n    return this.possibleTokTypes\n  }\n\n  walk(\n    prod: { definition: IProduction[] },\n    prevRest: IProduction[] = []\n  ): void {\n    // stop scanning once we found the path\n    if (!this.found) {\n      super.walk(prod, prevRest)\n    }\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // found the next production, need to keep walking in it\n    if (\n      refProd.referencedRule.name === this.nextProductionName &&\n      refProd.idx === this.nextProductionOccurrence\n    ) {\n      const fullRest = currRest.concat(prevRest)\n      this.updateExpectedNext()\n      this.walk(refProd.referencedRule, <any>fullRest)\n    }\n  }\n\n  updateExpectedNext(): void {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\"\n      this.nextProductionOccurrence = 0\n      this.isAtEndOfPath = true\n    } else {\n      this.nextProductionName = this.ruleStack.pop()!\n      this.nextProductionOccurrence = this.occurrenceStack.pop()!\n    }\n  }\n}\n\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n  private nextTerminalName = \"\"\n  private nextTerminalOccurrence = 0\n\n  constructor(topProd: Rule, protected path: ITokenGrammarPath) {\n    super(topProd, path)\n    this.nextTerminalName = this.path.lastTok.name\n    this.nextTerminalOccurrence = this.path.lastTokOccurrence\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (\n      this.isAtEndOfPath &&\n      terminal.terminalType.name === this.nextTerminalName &&\n      terminal.idx === this.nextTerminalOccurrence &&\n      !this.found\n    ) {\n      const fullRest = currRest.concat(prevRest)\n      const restProd = new Alternative({ definition: fullRest })\n      this.possibleTokTypes = first(restProd)\n      this.found = true\n    }\n  }\n}\n\nexport type AlternativesFirstTokens = TokenType[][]\n\nexport interface IFirstAfterRepetition {\n  token: TokenType | undefined\n  occurrence: number | undefined\n  isEndOfRule: boolean | undefined\n}\n\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n  protected result: IFirstAfterRepetition = {\n    token: undefined,\n    occurrence: undefined,\n    isEndOfRule: undefined\n  }\n\n  constructor(protected topRule: Rule, protected occurrence: number) {\n    super()\n  }\n\n  startWalking(): IFirstAfterRepetition {\n    this.walk(this.topRule)\n    return this.result\n  }\n}\n\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (manyProd.idx === this.occurrence) {\n      const firstAfterMany = _first(currRest.concat(prevRest))\n      this.result.isEndOfRule = firstAfterMany === undefined\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType\n        this.result.occurrence = firstAfterMany.idx\n      }\n    } else {\n      super.walkMany(manyProd, currRest, prevRest)\n    }\n  }\n}\n\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (manySepProd.idx === this.occurrence) {\n      const firstAfterManySep = _first(currRest.concat(prevRest))\n      this.result.isEndOfRule = firstAfterManySep === undefined\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType\n        this.result.occurrence = firstAfterManySep.idx\n      }\n    } else {\n      super.walkManySep(manySepProd, currRest, prevRest)\n    }\n  }\n}\n\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (atLeastOneProd.idx === this.occurrence) {\n      const firstAfterAtLeastOne = _first(currRest.concat(prevRest))\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType\n        this.result.occurrence = firstAfterAtLeastOne.idx\n      }\n    } else {\n      super.walkAtLeastOne(atLeastOneProd, currRest, prevRest)\n    }\n  }\n}\n\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOneSep(\n    atleastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      const firstAfterfirstAfterAtLeastOneSep = _first(\n        currRest.concat(prevRest)\n      )\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx\n      }\n    } else {\n      super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest)\n    }\n  }\n}\n\nexport interface PartialPathAndSuffixes {\n  partialPath: TokenType[]\n  suffixDef: IProduction[]\n}\n\nexport function possiblePathsFrom(\n  targetDef: IProduction[],\n  maxLength: number,\n  currPath: TokenType[] = []\n): PartialPathAndSuffixes[] {\n  // avoid side effects\n  currPath = clone(currPath)\n  let result: PartialPathAndSuffixes[] = []\n  let i = 0\n\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef: IProduction[]) {\n    return nextDef.concat(drop(targetDef, i + 1))\n  }\n\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition: IProduction[]) {\n    const alternatives = possiblePathsFrom(\n      remainingPathWith(definition),\n      maxLength,\n      currPath\n    )\n    return result.concat(alternatives)\n  }\n\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    const prod = targetDef[i]\n\n    /* istanbul ignore else */\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition)\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition)\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition)\n    } else if (prod instanceof RepetitionMandatory) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition\n        })\n      ])\n      return getAlternativesForProd(newDef)\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      const newDef = [\n        new Alternative({ definition: prod.definition }),\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition\n          )\n        })\n      ]\n      return getAlternativesForProd(newDef)\n    } else if (prod instanceof RepetitionWithSeparator) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition\n          )\n        })\n      ])\n      result = getAlternativesForProd(newDef)\n    } else if (prod instanceof Repetition) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition\n        })\n      ])\n      result = getAlternativesForProd(newDef)\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, (currAlt) => {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition)\n        }\n      })\n      return result\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType)\n    } else {\n      throw Error(\"non exhaustive match\")\n    }\n\n    i++\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i)\n  })\n\n  return result\n}\n\ninterface IPathToExamine {\n  idx: number\n  def: IProduction[]\n  ruleStack: string[]\n  occurrenceStack: number[]\n}\n\nexport function nextPossibleTokensAfter(\n  initialDef: IProduction[],\n  tokenVector: IToken[],\n  tokMatcher: TokenMatcher,\n  maxLookAhead: number\n): ISyntacticContentAssistPath[] {\n  const EXIT_NON_TERMINAL: any = \"EXIT_NONE_TERMINAL\"\n  // to avoid creating a new Array each time.\n  const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL]\n  const EXIT_ALTERNATIVE: any = \"EXIT_ALTERNATIVE\"\n  let foundCompletePath = false\n\n  const tokenVectorLength = tokenVector.length\n  const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1\n\n  const result: ISyntacticContentAssistPath[] = []\n\n  const possiblePaths: IPathToExamine[] = []\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: []\n  })\n\n  while (!isEmpty(possiblePaths)) {\n    const currPath = possiblePaths.pop()!\n\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (\n        foundCompletePath &&\n        last(possiblePaths)!.idx <= minimalAlternativesIndex\n      ) {\n        // remove irrelevant alternative\n        possiblePaths.pop()\n      }\n      continue\n    }\n\n    const currDef = currPath.def\n    const currIdx = currPath.idx\n    const currRuleStack = currPath.ruleStack\n    const currOccurrenceStack = currPath.occurrenceStack\n\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if (isEmpty(currDef)) {\n      continue\n    }\n\n    const prod = currDef[0]\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      const nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack)\n      }\n      possiblePaths.push(nextPath)\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        const nextIdx = currIdx + 1\n        const actualToken = tokenVector[nextIdx]\n        if (tokMatcher!(actualToken, prod.terminalType)) {\n          const nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack\n          }\n          possiblePaths.push(nextPath)\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        })\n        foundCompletePath = true\n      } else {\n        throw Error(\"non exhaustive match\")\n      }\n    } else if (prod instanceof NonTerminal) {\n      const newRuleStack = clone(currRuleStack)\n      newRuleStack.push(prod.nonTerminalName)\n\n      const newOccurrenceStack = clone(currOccurrenceStack)\n      newOccurrenceStack.push(prod.idx)\n\n      const nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack\n      }\n      possiblePaths.push(nextPath)\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPathWithout)\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE)\n\n      const nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPathWith)\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      })\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef))\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPath)\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const separatorGast = new Terminal({\n        terminalType: prod.separator\n      })\n      const secondIteration = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx\n      })\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef))\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPath)\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPathWithout)\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE)\n\n      const separatorGast = new Terminal({\n        terminalType: prod.separator\n      })\n      const nthRepetition = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx\n      })\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef))\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPathWith)\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPathWithout)\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE)\n\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      const nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx\n      })\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef))\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      }\n      possiblePaths.push(nextPathWith)\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (let i = prod.definition.length - 1; i >= 0; i--) {\n        const currAlt: any = prod.definition[i]\n        const currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack\n        }\n        possiblePaths.push(currAltPath)\n        possiblePaths.push(EXIT_ALTERNATIVE)\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack\n      })\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(\n        expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack)\n      )\n    } else {\n      throw Error(\"non exhaustive match\")\n    }\n  }\n  return result\n}\n\nfunction expandTopLevelRule(\n  topRule: Rule,\n  currIdx: number,\n  currRuleStack: string[],\n  currOccurrenceStack: number[]\n): IPathToExamine {\n  const newRuleStack = clone(currRuleStack)\n  newRuleStack.push(topRule.name)\n\n  const newCurrOccurrenceStack = clone(currOccurrenceStack)\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1)\n\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}