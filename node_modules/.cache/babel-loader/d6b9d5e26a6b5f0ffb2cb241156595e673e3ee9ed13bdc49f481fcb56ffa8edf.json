{"ast":null,"code":"import Node from './Node.js';\nclass VarNode extends Node {\n  constructor(node) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let nodeType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super(nodeType);\n    this.node = node;\n    this.name = name;\n  }\n  getHash(builder) {\n    return this.name || super.getHash(builder);\n  }\n  getNodeType(builder) {\n    return super.getNodeType(builder) || this.node.getNodeType(builder);\n  }\n  generate(builder) {\n    const type = builder.getVectorType(this.getNodeType(builder));\n    const node = this.node;\n    const name = this.name;\n    const snippet = node.build(builder, type);\n    const nodeVar = builder.getVarFromNode(this, type);\n    if (name !== null) {\n      nodeVar.name = name;\n    }\n    const propertyName = builder.getPropertyName(nodeVar);\n    builder.addFlowCode(`${propertyName} = ${snippet}`);\n    return propertyName;\n  }\n}\nVarNode.prototype.isVarNode = true;\nexport default VarNode;","map":{"version":3,"names":["Node","VarNode","constructor","node","name","nodeType","getHash","builder","getNodeType","generate","type","getVectorType","snippet","build","nodeVar","getVarFromNode","propertyName","getPropertyName","addFlowCode","prototype","isVarNode"],"sources":["/Users/desarrollo/Desktop/free/node_modules/three-stdlib/nodes/core/VarNode.js"],"sourcesContent":["import Node from './Node.js';\n\nclass VarNode extends Node {\n  constructor(node, name = null, nodeType = null) {\n    super(nodeType);\n    this.node = node;\n    this.name = name;\n  }\n\n  getHash(builder) {\n    return this.name || super.getHash(builder);\n  }\n\n  getNodeType(builder) {\n    return super.getNodeType(builder) || this.node.getNodeType(builder);\n  }\n\n  generate(builder) {\n    const type = builder.getVectorType(this.getNodeType(builder));\n    const node = this.node;\n    const name = this.name;\n    const snippet = node.build(builder, type);\n    const nodeVar = builder.getVarFromNode(this, type);\n\n    if (name !== null) {\n      nodeVar.name = name;\n    }\n\n    const propertyName = builder.getPropertyName(nodeVar);\n    builder.addFlowCode(`${propertyName} = ${snippet}`);\n    return propertyName;\n  }\n\n}\n\nVarNode.prototype.isVarNode = true;\n\nexport default VarNode;\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,WAAW;AAE5B,MAAMC,OAAO,SAASD,IAAI,CAAC;EACzBE,WAAW,CAACC,IAAI,EAAgC;IAAA,IAA9BC,IAAI,uEAAG,IAAI;IAAA,IAAEC,QAAQ,uEAAG,IAAI;IAC5C,KAAK,CAACA,QAAQ,CAAC;IACf,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB;EAEAE,OAAO,CAACC,OAAO,EAAE;IACf,OAAO,IAAI,CAACH,IAAI,IAAI,KAAK,CAACE,OAAO,CAACC,OAAO,CAAC;EAC5C;EAEAC,WAAW,CAACD,OAAO,EAAE;IACnB,OAAO,KAAK,CAACC,WAAW,CAACD,OAAO,CAAC,IAAI,IAAI,CAACJ,IAAI,CAACK,WAAW,CAACD,OAAO,CAAC;EACrE;EAEAE,QAAQ,CAACF,OAAO,EAAE;IAChB,MAAMG,IAAI,GAAGH,OAAO,CAACI,aAAa,CAAC,IAAI,CAACH,WAAW,CAACD,OAAO,CAAC,CAAC;IAC7D,MAAMJ,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMC,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAMQ,OAAO,GAAGT,IAAI,CAACU,KAAK,CAACN,OAAO,EAAEG,IAAI,CAAC;IACzC,MAAMI,OAAO,GAAGP,OAAO,CAACQ,cAAc,CAAC,IAAI,EAAEL,IAAI,CAAC;IAElD,IAAIN,IAAI,KAAK,IAAI,EAAE;MACjBU,OAAO,CAACV,IAAI,GAAGA,IAAI;IACrB;IAEA,MAAMY,YAAY,GAAGT,OAAO,CAACU,eAAe,CAACH,OAAO,CAAC;IACrDP,OAAO,CAACW,WAAW,CAAE,GAAEF,YAAa,MAAKJ,OAAQ,EAAC,CAAC;IACnD,OAAOI,YAAY;EACrB;AAEF;AAEAf,OAAO,CAACkB,SAAS,CAACC,SAAS,GAAG,IAAI;AAElC,eAAenB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}