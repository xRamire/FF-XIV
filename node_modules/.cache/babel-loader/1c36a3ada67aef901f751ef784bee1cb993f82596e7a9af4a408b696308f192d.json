{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.genDts = void 0;\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\nvar map_1 = __importDefault(require(\"lodash/map\"));\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\nvar uniq_1 = __importDefault(require(\"lodash/uniq\"));\nvar upperFirst_1 = __importDefault(require(\"lodash/upperFirst\"));\nfunction genDts(model, options) {\n  var contentParts = [];\n  contentParts = contentParts.concat(\"import type { CstNode, ICstVisitor, IToken } from \\\"chevrotain\\\";\");\n  contentParts = contentParts.concat((0, flatten_1.default)((0, map_1.default)(model, function (node) {\n    return genCstNodeTypes(node);\n  })));\n  if (options.includeVisitorInterface) {\n    contentParts = contentParts.concat(genVisitor(options.visitorInterfaceName, model));\n  }\n  return contentParts.join(\"\\n\\n\") + \"\\n\";\n}\nexports.genDts = genDts;\nfunction genCstNodeTypes(node) {\n  var nodeCstInterface = genNodeInterface(node);\n  var nodeChildrenInterface = genNodeChildrenType(node);\n  return [nodeCstInterface, nodeChildrenInterface];\n}\nfunction genNodeInterface(node) {\n  var nodeInterfaceName = getNodeInterfaceName(node.name);\n  var childrenTypeName = getNodeChildrenTypeName(node.name);\n  return \"export interface \".concat(nodeInterfaceName, \" extends CstNode {\\n  name: \\\"\").concat(node.name, \"\\\";\\n  children: \").concat(childrenTypeName, \";\\n}\");\n}\nfunction genNodeChildrenType(node) {\n  var typeName = getNodeChildrenTypeName(node.name);\n  return \"export type \".concat(typeName, \" = {\\n  \").concat((0, map_1.default)(node.properties, function (property) {\n    return genChildProperty(property);\n  }).join(\"\\n  \"), \"\\n};\");\n}\nfunction genChildProperty(prop) {\n  var typeName = buildTypeString(prop.type);\n  return \"\".concat(prop.name).concat(prop.optional ? \"?\" : \"\", \": \").concat(typeName, \"[];\");\n}\nfunction genVisitor(name, nodes) {\n  return \"export interface \".concat(name, \"<IN, OUT> extends ICstVisitor<IN, OUT> {\\n  \").concat((0, map_1.default)(nodes, function (node) {\n    return genVisitorFunction(node);\n  }).join(\"\\n  \"), \"\\n}\");\n}\nfunction genVisitorFunction(node) {\n  var childrenTypeName = getNodeChildrenTypeName(node.name);\n  return \"\".concat(node.name, \"(children: \").concat(childrenTypeName, \", param?: IN): OUT;\");\n}\nfunction buildTypeString(type) {\n  if ((0, isArray_1.default)(type)) {\n    var typeNames = (0, uniq_1.default)((0, map_1.default)(type, function (t) {\n      return getTypeString(t);\n    }));\n    var typeString = (0, reduce_1.default)(typeNames, function (sum, t) {\n      return sum + \" | \" + t;\n    });\n    return \"(\" + typeString + \")\";\n  } else {\n    return getTypeString(type);\n  }\n}\nfunction getTypeString(type) {\n  if (type.kind === \"token\") {\n    return \"IToken\";\n  }\n  return getNodeInterfaceName(type.name);\n}\nfunction getNodeInterfaceName(ruleName) {\n  return (0, upperFirst_1.default)(ruleName) + \"CstNode\";\n}\nfunction getNodeChildrenTypeName(ruleName) {\n  return (0, upperFirst_1.default)(ruleName) + \"CstChildren\";\n}","map":{"version":3,"mappings":"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","names":["genDts","model","options","contentParts","concat","node","includeVisitorInterface","genVisitor","visitorInterfaceName","join","exports","genCstNodeTypes","nodeCstInterface","genNodeInterface","nodeChildrenInterface","genNodeChildrenType","nodeInterfaceName","getNodeInterfaceName","name","childrenTypeName","getNodeChildrenTypeName","typeName","properties","property","genChildProperty","prop","buildTypeString","type","optional","nodes","genVisitorFunction","typeNames","t","typeString","sum","getTypeString","kind","ruleName"],"sources":["/Users/desarrollo/Desktop/free/node_modules/@chevrotain/cst-dts-gen/src/generate.ts"],"sourcesContent":["import flatten from \"lodash/flatten\"\nimport isArray from \"lodash/isArray\"\nimport map from \"lodash/map\"\nimport reduce from \"lodash/reduce\"\nimport uniq from \"lodash/uniq\"\nimport upperFirst from \"lodash/upperFirst\"\nimport { GenerateDtsOptions } from \"@chevrotain/types\"\nimport {\n  CstNodeTypeDefinition,\n  PropertyTypeDefinition,\n  PropertyArrayType,\n  TokenArrayType,\n  RuleArrayType\n} from \"./model\"\n\nexport function genDts(\n  model: CstNodeTypeDefinition[],\n  options: Required<GenerateDtsOptions>\n): string {\n  let contentParts: string[] = []\n\n  contentParts = contentParts.concat(\n    `import type { CstNode, ICstVisitor, IToken } from \"chevrotain\";`\n  )\n\n  contentParts = contentParts.concat(\n    flatten(map(model, (node) => genCstNodeTypes(node)))\n  )\n\n  if (options.includeVisitorInterface) {\n    contentParts = contentParts.concat(\n      genVisitor(options.visitorInterfaceName, model)\n    )\n  }\n\n  return contentParts.join(\"\\n\\n\") + \"\\n\"\n}\n\nfunction genCstNodeTypes(node: CstNodeTypeDefinition) {\n  const nodeCstInterface = genNodeInterface(node)\n  const nodeChildrenInterface = genNodeChildrenType(node)\n\n  return [nodeCstInterface, nodeChildrenInterface]\n}\n\nfunction genNodeInterface(node: CstNodeTypeDefinition) {\n  const nodeInterfaceName = getNodeInterfaceName(node.name)\n  const childrenTypeName = getNodeChildrenTypeName(node.name)\n\n  return `export interface ${nodeInterfaceName} extends CstNode {\n  name: \"${node.name}\";\n  children: ${childrenTypeName};\n}`\n}\n\nfunction genNodeChildrenType(node: CstNodeTypeDefinition) {\n  const typeName = getNodeChildrenTypeName(node.name)\n\n  return `export type ${typeName} = {\n  ${map(node.properties, (property) => genChildProperty(property)).join(\"\\n  \")}\n};`\n}\n\nfunction genChildProperty(prop: PropertyTypeDefinition) {\n  const typeName = buildTypeString(prop.type)\n  return `${prop.name}${prop.optional ? \"?\" : \"\"}: ${typeName}[];`\n}\n\nfunction genVisitor(name: string, nodes: CstNodeTypeDefinition[]) {\n  return `export interface ${name}<IN, OUT> extends ICstVisitor<IN, OUT> {\n  ${map(nodes, (node) => genVisitorFunction(node)).join(\"\\n  \")}\n}`\n}\n\nfunction genVisitorFunction(node: CstNodeTypeDefinition) {\n  const childrenTypeName = getNodeChildrenTypeName(node.name)\n  return `${node.name}(children: ${childrenTypeName}, param?: IN): OUT;`\n}\n\nfunction buildTypeString(type: PropertyArrayType) {\n  if (isArray(type)) {\n    const typeNames = uniq(map(type, (t) => getTypeString(t)))\n    const typeString = reduce(typeNames, (sum, t) => sum + \" | \" + t)\n    return \"(\" + typeString + \")\"\n  } else {\n    return getTypeString(type)\n  }\n}\n\nfunction getTypeString(type: TokenArrayType | RuleArrayType) {\n  if (type.kind === \"token\") {\n    return \"IToken\"\n  }\n  return getNodeInterfaceName(type.name)\n}\n\nfunction getNodeInterfaceName(ruleName: string) {\n  return upperFirst(ruleName) + \"CstNode\"\n}\n\nfunction getNodeChildrenTypeName(ruleName: string) {\n  return upperFirst(ruleName) + \"CstChildren\"\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}