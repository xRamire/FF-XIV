{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeBuilder = void 0;\nvar cst_1 = require(\"../../cst/cst\");\nvar noop_1 = __importDefault(require(\"lodash/noop\"));\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\nvar cst_visitor_1 = require(\"../../cst/cst_visitor\");\nvar parser_1 = require(\"../parser\");\n/**\n * This trait is responsible for the CST building logic.\n */\nvar TreeBuilder = /** @class */function () {\n  function TreeBuilder() {}\n  TreeBuilder.prototype.initTreeBuilder = function (config) {\n    this.CST_STACK = [];\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = config.outputCst;\n    this.nodeLocationTracking = (0, has_1.default)(config, \"nodeLocationTracking\") ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop_1.default;\n      this.cstFinallyStateUpdate = noop_1.default;\n      this.cstPostTerminal = noop_1.default;\n      this.cstPostNonTerminal = noop_1.default;\n      this.cstPostRule = noop_1.default;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = cst_1.setNodeLocationFull;\n          this.setNodeLocationFromNode = cst_1.setNodeLocationFull;\n          this.cstPostRule = noop_1.default;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop_1.default;\n          this.setNodeLocationFromNode = noop_1.default;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = cst_1.setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = cst_1.setNodeLocationOnlyOffset;\n          this.cstPostRule = noop_1.default;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop_1.default;\n          this.setNodeLocationFromNode = noop_1.default;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop_1.default;\n        this.setNodeLocationFromNode = noop_1.default;\n        this.cstPostRule = noop_1.default;\n        this.setInitialNodeLocation = noop_1.default;\n      } else {\n        throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\".concat(config.nodeLocationTracking, \"\\\"\"));\n      }\n    }\n  };\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN\n    };\n  };\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN\n    };\n  };\n  TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n        * @param cstNode\n     */\n  TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {\n    var nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n  TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName) {\n    var cstNode = {\n      name: fullRuleName,\n      children: Object.create(null)\n    };\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  };\n  TreeBuilder.prototype.cstFinallyStateUpdate = function () {\n    this.CST_STACK.pop();\n  };\n  TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    var prevToken = this.LA(0);\n    var loc = ruleCstNode.location;\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  };\n  TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {\n    var prevToken = this.LA(0);\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    var loc = ruleCstNode.location;\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  };\n  TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {\n    var rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    (0, cst_1.addTerminalToCst)(rootCst, consumedToken, key);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location, consumedToken);\n  };\n  TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {\n    var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    (0, cst_1.addNoneTerminalToCst)(preCstNode, ruleName, ruleCstResult);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n  };\n  TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {\n    if ((0, isUndefined_1.default)(this.baseCstVisitorConstructor)) {\n      var newBaseCstVisitorConstructor = (0, cst_visitor_1.createBaseSemanticVisitorConstructor)(this.className, (0, keys_1.default)(this.gastProductionsCache));\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n    return this.baseCstVisitorConstructor;\n  };\n  TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {\n    if ((0, isUndefined_1.default)(this.baseCstVisitorWithDefaultsConstructor)) {\n      var newConstructor = (0, cst_visitor_1.createBaseVisitorConstructorWithDefaults)(this.className, (0, keys_1.default)(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n    return this.baseCstVisitorWithDefaultsConstructor;\n  };\n  TreeBuilder.prototype.getLastExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  };\n  TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  };\n  TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {\n    var occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  };\n  return TreeBuilder;\n}();\nexports.TreeBuilder = TreeBuilder;","map":{"version":3,"mappings":"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","names":["TreeBuilder","config","CST_STACK","outputCst","nodeLocationTracking","parser_1","cstInvocationStateUpdate","noop_1","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","cstPostRule","test","recoveryEnabled","setNodeLocationFromToken","cst_1","setNodeLocationFromNode","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","Error","cstNode","location","startOffset","NaN","endOffset","LA","startLine","startColumn","endLine","endColumn","nextToken","fullRuleName","name","children","Object","create","push","pop","ruleCstNode","prevToken","loc","key","consumedToken","rootCst","length","ruleCstResult","ruleName","preCstNode","baseCstVisitorConstructor","newBaseCstVisitorConstructor","className","gastProductionsCache","baseCstVisitorWithDefaultsConstructor","newConstructor","getBaseCstVisitorConstructor","ruleStack","RULE_STACK","occurrenceStack","RULE_OCCURRENCE_STACK","exports"],"sources":["/Users/desarrollo/Desktop/free/node_modules/chevrotain/src/parse/parser/traits/tree_builder.ts"],"sourcesContent":["import {\n  addNoneTerminalToCst,\n  addTerminalToCst,\n  setNodeLocationFull,\n  setNodeLocationOnlyOffset\n} from \"../../cst/cst\"\nimport noop from \"lodash/noop\"\nimport has from \"lodash/has\"\nimport keys from \"lodash/keys\"\nimport isUndefined from \"lodash/isUndefined\"\nimport {\n  createBaseSemanticVisitorConstructor,\n  createBaseVisitorConstructorWithDefaults\n} from \"../../cst/cst_visitor\"\nimport {\n  CstNode,\n  CstNodeLocation,\n  ICstVisitor,\n  IParserConfig,\n  IToken,\n  nodeLocationTrackingOptions\n} from \"@chevrotain/types\"\nimport { MixedInParser } from \"./parser_traits\"\nimport { DEFAULT_PARSER_CONFIG } from \"../parser\"\n\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n  outputCst: boolean\n  CST_STACK: CstNode[]\n  baseCstVisitorConstructor: Function\n  baseCstVisitorWithDefaultsConstructor: Function\n\n  // dynamically assigned Methods\n  setNodeLocationFromNode: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation\n  ) => void\n  setNodeLocationFromToken: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation\n  ) => void\n  cstPostRule: (this: MixedInParser, ruleCstNode: CstNode) => void\n\n  setInitialNodeLocation: (cstNode: CstNode) => void\n  nodeLocationTracking: nodeLocationTrackingOptions\n\n  initTreeBuilder(this: MixedInParser, config: IParserConfig) {\n    this.CST_STACK = []\n\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = (config as any).outputCst\n\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n      ? (config.nodeLocationTracking as nodeLocationTrackingOptions) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.nodeLocationTracking\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop\n      this.cstFinallyStateUpdate = noop\n      this.cstPostTerminal = noop\n      this.cstPostNonTerminal = noop\n      this.cstPostRule = noop\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull\n          this.setNodeLocationFromNode = setNodeLocationFull\n          this.cstPostRule = noop\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery\n        } else {\n          this.setNodeLocationFromToken = noop\n          this.setNodeLocationFromNode = noop\n          this.cstPostRule = this.cstPostRuleFull\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = <any>setNodeLocationOnlyOffset\n          this.setNodeLocationFromNode = <any>setNodeLocationOnlyOffset\n          this.cstPostRule = noop\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRecovery\n        } else {\n          this.setNodeLocationFromToken = noop\n          this.setNodeLocationFromNode = noop\n          this.cstPostRule = this.cstPostRuleOnlyOffset\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRegular\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop\n        this.setNodeLocationFromNode = noop\n        this.cstPostRule = noop\n        this.setInitialNodeLocation = noop\n      } else {\n        throw Error(\n          `Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`\n        )\n      }\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRecovery(\n    this: MixedInParser,\n    cstNode: any\n  ): void {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRegular(\n    this: MixedInParser,\n    cstNode: any\n  ): void {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN\n    }\n  }\n\n  setInitialNodeLocationFullRecovery(this: MixedInParser, cstNode: any): void {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    }\n  }\n\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n\n     * @param cstNode\n     */\n  setInitialNodeLocationFullRegular(this: MixedInParser, cstNode: any): void {\n    const nextToken = this.LA(1)\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    }\n  }\n\n  cstInvocationStateUpdate(this: MixedInParser, fullRuleName: string): void {\n    const cstNode: CstNode = {\n      name: fullRuleName,\n      children: Object.create(null)\n    }\n\n    this.setInitialNodeLocation(cstNode)\n    this.CST_STACK.push(cstNode)\n  }\n\n  cstFinallyStateUpdate(this: MixedInParser): void {\n    this.CST_STACK.pop()\n  }\n\n  cstPostRuleFull(this: MixedInParser, ruleCstNode: CstNode): void {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    const prevToken = this.LA(0) as Required<CstNodeLocation>\n    const loc = ruleCstNode.location as Required<CstNodeLocation>\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset\n      loc.endLine = prevToken.endLine\n      loc.endColumn = prevToken.endColumn\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN\n      loc.startLine = NaN\n      loc.startColumn = NaN\n    }\n  }\n\n  cstPostRuleOnlyOffset(this: MixedInParser, ruleCstNode: CstNode): void {\n    const prevToken = this.LA(0)\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    const loc = ruleCstNode.location!\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN\n    }\n  }\n\n  cstPostTerminal(\n    this: MixedInParser,\n    key: string,\n    consumedToken: IToken\n  ): void {\n    const rootCst = this.CST_STACK[this.CST_STACK.length - 1]\n    addTerminalToCst(rootCst, consumedToken, key)\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location!, <any>consumedToken)\n  }\n\n  cstPostNonTerminal(\n    this: MixedInParser,\n    ruleCstResult: CstNode,\n    ruleName: string\n  ): void {\n    const preCstNode = this.CST_STACK[this.CST_STACK.length - 1]\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult)\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location!, ruleCstResult.location!)\n  }\n\n  getBaseCstVisitorConstructor<IN = any, OUT = any>(\n    this: MixedInParser\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>\n  } {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n        this.className,\n        keys(this.gastProductionsCache)\n      )\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor\n      return newBaseCstVisitorConstructor\n    }\n\n    return <any>this.baseCstVisitorConstructor\n  }\n\n  getBaseCstVisitorConstructorWithDefaults<IN = any, OUT = any>(\n    this: MixedInParser\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>\n  } {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      const newConstructor = createBaseVisitorConstructorWithDefaults(\n        this.className,\n        keys(this.gastProductionsCache),\n        this.getBaseCstVisitorConstructor()\n      )\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor\n      return newConstructor\n    }\n\n    return <any>this.baseCstVisitorWithDefaultsConstructor\n  }\n\n  getLastExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK\n    return ruleStack[ruleStack.length - 1]\n  }\n\n  getPreviousExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK\n    return ruleStack[ruleStack.length - 2]\n  }\n\n  getLastExplicitRuleOccurrenceIndex(this: MixedInParser): number {\n    const occurrenceStack = this.RULE_OCCURRENCE_STACK\n    return occurrenceStack[occurrenceStack.length - 1]\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}