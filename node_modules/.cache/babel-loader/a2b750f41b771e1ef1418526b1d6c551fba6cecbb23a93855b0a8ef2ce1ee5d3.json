{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RestWalker = void 0;\nvar drop_1 = __importDefault(require(\"lodash/drop\"));\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\nvar gast_1 = require(\"@chevrotain/gast\");\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nvar RestWalker = /** @class */function () {\n  function RestWalker() {}\n  RestWalker.prototype.walk = function (prod, prevRest) {\n    var _this = this;\n    if (prevRest === void 0) {\n      prevRest = [];\n    }\n    (0, forEach_1.default)(prod.definition, function (subProd, index) {\n      var currRest = (0, drop_1.default)(prod.definition, index + 1);\n      /* istanbul ignore else */\n      if (subProd instanceof gast_1.NonTerminal) {\n        _this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_1.Terminal) {\n        _this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_1.Alternative) {\n        _this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_1.Option) {\n        _this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_1.RepetitionMandatory) {\n        _this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_1.RepetitionMandatoryWithSeparator) {\n        _this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_1.RepetitionWithSeparator) {\n        _this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_1.Repetition) {\n        _this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof gast_1.Alternation) {\n        _this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  };\n  RestWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {};\n  RestWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {};\n  RestWalker.prototype.walkFlat = function (flatProd, currRest, prevRest) {\n    // ABCDEF => after the D the rest is EF\n    var fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, fullOrRest);\n  };\n  RestWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    var fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, fullOrRest);\n  };\n  RestWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    var fullAtLeastOneRest = [new gast_1.Option({\n      definition: atLeastOneProd.definition\n    })].concat(currRest, prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  };\n  RestWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    var fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  };\n  RestWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    var fullManyRest = [new gast_1.Option({\n      definition: manyProd.definition\n    })].concat(currRest, prevRest);\n    this.walk(manyProd, fullManyRest);\n  };\n  RestWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    var fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);\n    this.walk(manySepProd, fullManySepRest);\n  };\n  RestWalker.prototype.walkOr = function (orProd, currRest, prevRest) {\n    var _this = this;\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    var fullOrRest = currRest.concat(prevRest);\n    // walk all different alternatives\n    (0, forEach_1.default)(orProd.definition, function (alt) {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      var prodWrapper = new gast_1.Alternative({\n        definition: [alt]\n      });\n      _this.walk(prodWrapper, fullOrRest);\n    });\n  };\n  return RestWalker;\n}();\nexports.RestWalker = RestWalker;\nfunction restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {\n  var repSepRest = [new gast_1.Option({\n    definition: [new gast_1.Terminal({\n      terminalType: repSepProd.separator\n    })].concat(repSepProd.definition)\n  })];\n  var fullRepSepRest = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}","map":{"version":3,"mappings":"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","names":["RestWalker","prod","prevRest","definition","subProd","index","currRest","gast_1","_this","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","Error","terminal","refProd","flatProd","fullOrRest","concat","walk","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","alt","prodWrapper","exports","repSepProd","repSepRest","terminalType","separator","fullRepSepRest"],"sources":["/Users/desarrollo/Desktop/free/node_modules/chevrotain/src/parse/grammar/rest.ts"],"sourcesContent":["import drop from \"lodash/drop\"\nimport forEach from \"lodash/forEach\"\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal\n} from \"@chevrotain/gast\"\nimport { IProduction } from \"@chevrotain/types\"\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: { definition: IProduction[] }, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1)\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest)\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest)\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest)\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest)\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest)\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest)\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest)\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest)\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest)\n      } else {\n        throw Error(\"non exhaustive match\")\n      }\n    })\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest)\n    this.walk(flatProd, <any>fullOrRest)\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest)\n    this.walk(optionProd, <any>fullOrRest)\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition })\n    ].concat(<any>currRest, <any>prevRest)\n    this.walk(atLeastOneProd, fullAtLeastOneRest)\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest\n    )\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest)\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition })\n    ].concat(<any>currRest, <any>prevRest)\n    this.walk(manyProd, fullManyRest)\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest\n    )\n    this.walk(manySepProd, fullManySepRest)\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[]\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest)\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] })\n      this.walk(prodWrapper, <any>fullOrRest)\n    })\n  }\n}\n\nfunction restForRepetitionWithSeparator(\n  repSepProd: RepetitionWithSeparator,\n  currRest: IProduction[],\n  prevRest: IProduction[]\n) {\n  const repSepRest = [\n    new Option({\n      definition: [\n        new Terminal({ terminalType: repSepProd.separator }) as IProduction\n      ].concat(repSepProd.definition)\n    }) as IProduction\n  ]\n  const fullRepSepRest: IProduction[] = repSepRest.concat(currRest, prevRest)\n  return fullRepSepRest\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}