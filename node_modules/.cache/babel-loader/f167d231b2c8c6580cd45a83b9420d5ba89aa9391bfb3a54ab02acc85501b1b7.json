{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tokenMatcher = exports.createTokenInstance = exports.EOF = exports.createToken = exports.hasTokenLabel = exports.tokenName = exports.tokenLabel = void 0;\nvar isString_1 = __importDefault(require(\"lodash/isString\"));\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\nvar lexer_public_1 = require(\"./lexer_public\");\nvar tokens_1 = require(\"./tokens\");\nfunction tokenLabel(tokType) {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\nexports.tokenLabel = tokenLabel;\nfunction tokenName(tokType) {\n  return tokType.name;\n}\nexports.tokenName = tokenName;\nfunction hasTokenLabel(obj) {\n  return (0, isString_1.default)(obj.LABEL) && obj.LABEL !== \"\";\n}\nexports.hasTokenLabel = hasTokenLabel;\nvar PARENT = \"parent\";\nvar CATEGORIES = \"categories\";\nvar LABEL = \"label\";\nvar GROUP = \"group\";\nvar PUSH_MODE = \"push_mode\";\nvar POP_MODE = \"pop_mode\";\nvar LONGER_ALT = \"longer_alt\";\nvar LINE_BREAKS = \"line_breaks\";\nvar START_CHARS_HINT = \"start_chars_hint\";\nfunction createToken(config) {\n  return createTokenInternal(config);\n}\nexports.createToken = createToken;\nfunction createTokenInternal(config) {\n  var pattern = config.pattern;\n  var tokenType = {};\n  tokenType.name = config.name;\n  if (!(0, isUndefined_1.default)(pattern)) {\n    tokenType.PATTERN = pattern;\n  }\n  if ((0, has_1.default)(config, PARENT)) {\n    throw \"The parent property is no longer supported.\\n\" + \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\";\n  }\n  if ((0, has_1.default)(config, CATEGORIES)) {\n    // casting to ANY as this will be fixed inside `augmentTokenTypes``\n    tokenType.CATEGORIES = config[CATEGORIES];\n  }\n  (0, tokens_1.augmentTokenTypes)([tokenType]);\n  if ((0, has_1.default)(config, LABEL)) {\n    tokenType.LABEL = config[LABEL];\n  }\n  if ((0, has_1.default)(config, GROUP)) {\n    tokenType.GROUP = config[GROUP];\n  }\n  if ((0, has_1.default)(config, POP_MODE)) {\n    tokenType.POP_MODE = config[POP_MODE];\n  }\n  if ((0, has_1.default)(config, PUSH_MODE)) {\n    tokenType.PUSH_MODE = config[PUSH_MODE];\n  }\n  if ((0, has_1.default)(config, LONGER_ALT)) {\n    tokenType.LONGER_ALT = config[LONGER_ALT];\n  }\n  if ((0, has_1.default)(config, LINE_BREAKS)) {\n    tokenType.LINE_BREAKS = config[LINE_BREAKS];\n  }\n  if ((0, has_1.default)(config, START_CHARS_HINT)) {\n    tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n  }\n  return tokenType;\n}\nexports.EOF = createToken({\n  name: \"EOF\",\n  pattern: lexer_public_1.Lexer.NA\n});\n(0, tokens_1.augmentTokenTypes)([exports.EOF]);\nfunction createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {\n  return {\n    image: image,\n    startOffset: startOffset,\n    endOffset: endOffset,\n    startLine: startLine,\n    endLine: endLine,\n    startColumn: startColumn,\n    endColumn: endColumn,\n    tokenTypeIdx: tokType.tokenTypeIdx,\n    tokenType: tokType\n  };\n}\nexports.createTokenInstance = createTokenInstance;\nfunction tokenMatcher(token, tokType) {\n  return (0, tokens_1.tokenStructuredMatcher)(token, tokType);\n}\nexports.tokenMatcher = tokenMatcher;","map":{"version":3,"mappings":"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","names":["tokenLabel","tokType","hasTokenLabel","LABEL","name","exports","tokenName","obj","PARENT","CATEGORIES","GROUP","PUSH_MODE","POP_MODE","LONGER_ALT","LINE_BREAKS","START_CHARS_HINT","createToken","config","createTokenInternal","pattern","tokenType","PATTERN","lexer_public_1","NA","createTokenInstance","image","startOffset","endOffset","startLine","endLine","startColumn","endColumn","tokenTypeIdx","tokenMatcher","token"],"sources":["/Users/desarrollo/Desktop/free/node_modules/chevrotain/src/scan/tokens_public.ts"],"sourcesContent":["import isString from \"lodash/isString\"\nimport has from \"lodash/has\"\nimport isUndefined from \"lodash/isUndefined\"\nimport { Lexer } from \"./lexer_public\"\nimport { augmentTokenTypes, tokenStructuredMatcher } from \"./tokens\"\nimport { IToken, ITokenConfig, TokenType } from \"@chevrotain/types\"\n\nexport function tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL\n  } else {\n    return tokType.name\n  }\n}\n\nexport function tokenName(tokType: TokenType): string {\n  return tokType.name\n}\n\nexport function hasTokenLabel(\n  obj: TokenType\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\"\n}\n\nconst PARENT = \"parent\"\nconst CATEGORIES = \"categories\"\nconst LABEL = \"label\"\nconst GROUP = \"group\"\nconst PUSH_MODE = \"push_mode\"\nconst POP_MODE = \"pop_mode\"\nconst LONGER_ALT = \"longer_alt\"\nconst LINE_BREAKS = \"line_breaks\"\nconst START_CHARS_HINT = \"start_chars_hint\"\n\nexport function createToken(config: ITokenConfig): TokenType {\n  return createTokenInternal(config)\n}\n\nfunction createTokenInternal(config: ITokenConfig): TokenType {\n  const pattern = config.pattern\n\n  const tokenType: TokenType = <any>{}\n  tokenType.name = config.name\n\n  if (!isUndefined(pattern)) {\n    tokenType.PATTERN = pattern\n  }\n\n  if (has(config, PARENT)) {\n    throw (\n      \"The parent property is no longer supported.\\n\" +\n      \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\"\n    )\n  }\n\n  if (has(config, CATEGORIES)) {\n    // casting to ANY as this will be fixed inside `augmentTokenTypes``\n    tokenType.CATEGORIES = <any>config[CATEGORIES]\n  }\n\n  augmentTokenTypes([tokenType])\n\n  if (has(config, LABEL)) {\n    tokenType.LABEL = config[LABEL]\n  }\n\n  if (has(config, GROUP)) {\n    tokenType.GROUP = config[GROUP]\n  }\n\n  if (has(config, POP_MODE)) {\n    tokenType.POP_MODE = config[POP_MODE]\n  }\n\n  if (has(config, PUSH_MODE)) {\n    tokenType.PUSH_MODE = config[PUSH_MODE]\n  }\n\n  if (has(config, LONGER_ALT)) {\n    tokenType.LONGER_ALT = config[LONGER_ALT]\n  }\n\n  if (has(config, LINE_BREAKS)) {\n    tokenType.LINE_BREAKS = config[LINE_BREAKS]\n  }\n\n  if (has(config, START_CHARS_HINT)) {\n    tokenType.START_CHARS_HINT = config[START_CHARS_HINT]\n  }\n\n  return tokenType\n}\n\nexport const EOF = createToken({ name: \"EOF\", pattern: Lexer.NA })\naugmentTokenTypes([EOF])\n\nexport function createTokenInstance(\n  tokType: TokenType,\n  image: string,\n  startOffset: number,\n  endOffset: number,\n  startLine: number,\n  endLine: number,\n  startColumn: number,\n  endColumn: number\n): IToken {\n  return {\n    image,\n    startOffset,\n    endOffset,\n    startLine,\n    endLine,\n    startColumn,\n    endColumn,\n    tokenTypeIdx: (<any>tokType).tokenTypeIdx,\n    tokenType: tokType\n  }\n}\n\nexport function tokenMatcher(token: IToken, tokType: TokenType): boolean {\n  return tokenStructuredMatcher(token, tokType)\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}