{"ast":null,"code":"import { Loader, FileLoader, TextureLoader, Points, LineSegments, Mesh, PointsMaterial, LineBasicMaterial, BufferAttribute, MeshPhongMaterial, BackSide, DoubleSide, FrontSide, Vector2, Color, AddOperation, EquirectangularRefractionMapping, EquirectangularReflectionMapping, ClampToEdgeWrapping, MirroredRepeatWrapping, RepeatWrapping, MeshPhysicalMaterial, MeshStandardMaterial, BufferGeometry, Float32BufferAttribute } from 'three';\nimport { IFFParser } from './lwo/IFFParser.js';\n\n/**\n * @version 1.1.1\n *\n * @desc Load files in LWO3 and LWO2 format on Three.js\n *\n * LWO3 format specification:\n * \thttp://static.lightwave3d.com/sdk/2018/html/filefmts/lwo3.html\n *\n * LWO2 format specification:\n * \thttp://static.lightwave3d.com/sdk/2018/html/filefmts/lwo2.html\n *\n **/\n\nlet _lwoTree;\nclass LWOLoader extends Loader {\n  constructor(manager) {\n    let parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(manager);\n    this.resourcePath = parameters.resourcePath !== undefined ? parameters.resourcePath : '';\n  }\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? extractParentUrl(url, 'Objects') : scope.path; // give the mesh a default name based on the filename\n\n    const modelName = url.split(path).pop().split('.')[0];\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (buffer) {\n      // console.time( 'Total parsing: ' );\n      try {\n        onLoad(scope.parse(buffer, path, modelName));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n        scope.manager.itemError(url);\n      } // console.timeEnd( 'Total parsing: ' );\n    }, onProgress, onError);\n  }\n  parse(iffBuffer, path, modelName) {\n    _lwoTree = new IFFParser().parse(iffBuffer); // console.log( 'lwoTree', lwoTree );\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new LWOTreeParser(textureLoader).parse(modelName);\n  }\n} // Parse the lwoTree object\n\nclass LWOTreeParser {\n  constructor(textureLoader) {\n    this.textureLoader = textureLoader;\n  }\n  parse(modelName) {\n    this.materials = new MaterialParser(this.textureLoader).parse();\n    this.defaultLayerName = modelName;\n    this.meshes = this.parseLayers();\n    return {\n      materials: this.materials,\n      meshes: this.meshes\n    };\n  }\n  parseLayers() {\n    // array of all meshes for building hierarchy\n    const meshes = []; // final array containing meshes with scene graph hierarchy set up\n\n    const finalMeshes = [];\n    const geometryParser = new GeometryParser();\n    const scope = this;\n    _lwoTree.layers.forEach(function (layer) {\n      const geometry = geometryParser.parse(layer.geometry, layer);\n      const mesh = scope.parseMesh(geometry, layer);\n      meshes[layer.number] = mesh;\n      if (layer.parent === -1) finalMeshes.push(mesh);else meshes[layer.parent].add(mesh);\n    });\n    this.applyPivots(finalMeshes);\n    return finalMeshes;\n  }\n  parseMesh(geometry, layer) {\n    let mesh;\n    const materials = this.getMaterials(geometry.userData.matNames, layer.geometry.type);\n    this.duplicateUVs(geometry, materials);\n    if (layer.geometry.type === 'points') mesh = new Points(geometry, materials);else if (layer.geometry.type === 'lines') mesh = new LineSegments(geometry, materials);else mesh = new Mesh(geometry, materials);\n    if (layer.name) mesh.name = layer.name;else mesh.name = this.defaultLayerName + '_layer_' + layer.number;\n    mesh.userData.pivot = layer.pivot;\n    return mesh;\n  } // TODO: may need to be reversed in z to convert LWO to three.js coordinates\n\n  applyPivots(meshes) {\n    meshes.forEach(function (mesh) {\n      mesh.traverse(function (child) {\n        const pivot = child.userData.pivot;\n        child.position.x += pivot[0];\n        child.position.y += pivot[1];\n        child.position.z += pivot[2];\n        if (child.parent) {\n          const parentPivot = child.parent.userData.pivot;\n          child.position.x -= parentPivot[0];\n          child.position.y -= parentPivot[1];\n          child.position.z -= parentPivot[2];\n        }\n      });\n    });\n  }\n  getMaterials(namesArray, type) {\n    const materials = [];\n    const scope = this;\n    namesArray.forEach(function (name, i) {\n      materials[i] = scope.getMaterialByName(name);\n    }); // convert materials to line or point mats if required\n\n    if (type === 'points' || type === 'lines') {\n      materials.forEach(function (mat, i) {\n        const spec = {\n          color: mat.color\n        };\n        if (type === 'points') {\n          spec.size = 0.1;\n          spec.map = mat.map;\n          spec.morphTargets = mat.morphTargets;\n          materials[i] = new PointsMaterial(spec);\n        } else if (type === 'lines') {\n          materials[i] = new LineBasicMaterial(spec);\n        }\n      });\n    } // if there is only one material, return that directly instead of array\n\n    const filtered = materials.filter(Boolean);\n    if (filtered.length === 1) return filtered[0];\n    return materials;\n  }\n  getMaterialByName(name) {\n    return this.materials.filter(function (m) {\n      return m.name === name;\n    })[0];\n  } // If the material has an aoMap, duplicate UVs\n\n  duplicateUVs(geometry, materials) {\n    let duplicateUVs = false;\n    if (!Array.isArray(materials)) {\n      if (materials.aoMap) duplicateUVs = true;\n    } else {\n      materials.forEach(function (material) {\n        if (material.aoMap) duplicateUVs = true;\n      });\n    }\n    if (!duplicateUVs) return;\n    geometry.setAttribute('uv2', new BufferAttribute(geometry.attributes.uv.array, 2));\n  }\n}\nclass MaterialParser {\n  constructor(textureLoader) {\n    this.textureLoader = textureLoader;\n  }\n  parse() {\n    const materials = [];\n    this.textures = {};\n    for (const name in _lwoTree.materials) {\n      if (_lwoTree.format === 'LWO3') {\n        materials.push(this.parseMaterial(_lwoTree.materials[name], name, _lwoTree.textures));\n      } else if (_lwoTree.format === 'LWO2') {\n        materials.push(this.parseMaterialLwo2(_lwoTree.materials[name], name, _lwoTree.textures));\n      }\n    }\n    return materials;\n  }\n  parseMaterial(materialData, name, textures) {\n    let params = {\n      name: name,\n      side: this.getSide(materialData.attributes),\n      flatShading: this.getSmooth(materialData.attributes)\n    };\n    const connections = this.parseConnections(materialData.connections, materialData.nodes);\n    const maps = this.parseTextureNodes(connections.maps);\n    this.parseAttributeImageMaps(connections.attributes, textures, maps, materialData.maps);\n    const attributes = this.parseAttributes(connections.attributes, maps);\n    this.parseEnvMap(connections, maps, attributes);\n    params = Object.assign(maps, params);\n    params = Object.assign(params, attributes);\n    const materialType = this.getMaterialType(connections.attributes);\n    return new materialType(params);\n  }\n  parseMaterialLwo2(materialData, name\n  /*, textures*/) {\n    let params = {\n      name: name,\n      side: this.getSide(materialData.attributes),\n      flatShading: this.getSmooth(materialData.attributes)\n    };\n    const attributes = this.parseAttributes(materialData.attributes, {});\n    params = Object.assign(params, attributes);\n    return new MeshPhongMaterial(params);\n  } // Note: converting from left to right handed coords by switching x -> -x in vertices, and\n  // then switching mat FrontSide -> BackSide\n  // NB: this means that FrontSide and BackSide have been switched!\n\n  getSide(attributes) {\n    if (!attributes.side) return BackSide;\n    switch (attributes.side) {\n      case 0:\n      case 1:\n        return BackSide;\n      case 2:\n        return FrontSide;\n      case 3:\n        return DoubleSide;\n    }\n  }\n  getSmooth(attributes) {\n    if (!attributes.smooth) return true;\n    return !attributes.smooth;\n  }\n  parseConnections(connections, nodes) {\n    const materialConnections = {\n      maps: {}\n    };\n    const inputName = connections.inputName;\n    const inputNodeName = connections.inputNodeName;\n    const nodeName = connections.nodeName;\n    const scope = this;\n    inputName.forEach(function (name, index) {\n      if (name === 'Material') {\n        const matNode = scope.getNodeByRefName(inputNodeName[index], nodes);\n        materialConnections.attributes = matNode.attributes;\n        materialConnections.envMap = matNode.fileName;\n        materialConnections.name = inputNodeName[index];\n      }\n    });\n    nodeName.forEach(function (name, index) {\n      if (name === materialConnections.name) {\n        materialConnections.maps[inputName[index]] = scope.getNodeByRefName(inputNodeName[index], nodes);\n      }\n    });\n    return materialConnections;\n  }\n  getNodeByRefName(refName, nodes) {\n    for (const name in nodes) {\n      if (nodes[name].refName === refName) return nodes[name];\n    }\n  }\n  parseTextureNodes(textureNodes) {\n    const maps = {};\n    for (const name in textureNodes) {\n      const node = textureNodes[name];\n      const path = node.fileName;\n      if (!path) return;\n      const texture = this.loadTexture(path);\n      if (node.widthWrappingMode !== undefined) texture.wrapS = this.getWrappingType(node.widthWrappingMode);\n      if (node.heightWrappingMode !== undefined) texture.wrapT = this.getWrappingType(node.heightWrappingMode);\n      switch (name) {\n        case 'Color':\n          maps.map = texture;\n          break;\n        case 'Roughness':\n          maps.roughnessMap = texture;\n          maps.roughness = 0.5;\n          break;\n        case 'Specular':\n          maps.specularMap = texture;\n          maps.specular = 0xffffff;\n          break;\n        case 'Luminous':\n          maps.emissiveMap = texture;\n          maps.emissive = 0x808080;\n          break;\n        case 'Luminous Color':\n          maps.emissive = 0x808080;\n          break;\n        case 'Metallic':\n          maps.metalnessMap = texture;\n          maps.metalness = 0.5;\n          break;\n        case 'Transparency':\n        case 'Alpha':\n          maps.alphaMap = texture;\n          maps.transparent = true;\n          break;\n        case 'Normal':\n          maps.normalMap = texture;\n          if (node.amplitude !== undefined) maps.normalScale = new Vector2(node.amplitude, node.amplitude);\n          break;\n        case 'Bump':\n          maps.bumpMap = texture;\n          break;\n      }\n    } // LWO BSDF materials can have both spec and rough, but this is not valid in three\n\n    if (maps.roughnessMap && maps.specularMap) delete maps.specularMap;\n    return maps;\n  } // maps can also be defined on individual material attributes, parse those here\n  // This occurs on Standard (Phong) surfaces\n\n  parseAttributeImageMaps(attributes, textures, maps) {\n    for (const name in attributes) {\n      const attribute = attributes[name];\n      if (attribute.maps) {\n        const mapData = attribute.maps[0];\n        const path = this.getTexturePathByIndex(mapData.imageIndex, textures);\n        if (!path) return;\n        const texture = this.loadTexture(path);\n        if (mapData.wrap !== undefined) texture.wrapS = this.getWrappingType(mapData.wrap.w);\n        if (mapData.wrap !== undefined) texture.wrapT = this.getWrappingType(mapData.wrap.h);\n        switch (name) {\n          case 'Color':\n            maps.map = texture;\n            break;\n          case 'Diffuse':\n            maps.aoMap = texture;\n            break;\n          case 'Roughness':\n            maps.roughnessMap = texture;\n            maps.roughness = 1;\n            break;\n          case 'Specular':\n            maps.specularMap = texture;\n            maps.specular = 0xffffff;\n            break;\n          case 'Luminosity':\n            maps.emissiveMap = texture;\n            maps.emissive = 0x808080;\n            break;\n          case 'Metallic':\n            maps.metalnessMap = texture;\n            maps.metalness = 1;\n            break;\n          case 'Transparency':\n          case 'Alpha':\n            maps.alphaMap = texture;\n            maps.transparent = true;\n            break;\n          case 'Normal':\n            maps.normalMap = texture;\n            break;\n          case 'Bump':\n            maps.bumpMap = texture;\n            break;\n        }\n      }\n    }\n  }\n  parseAttributes(attributes, maps) {\n    const params = {}; // don't use color data if color map is present\n\n    if (attributes.Color && !maps.map) {\n      params.color = new Color().fromArray(attributes.Color.value);\n    } else {\n      params.color = new Color();\n    }\n    if (attributes.Transparency && attributes.Transparency.value !== 0) {\n      params.opacity = 1 - attributes.Transparency.value;\n      params.transparent = true;\n    }\n    if (attributes['Bump Height']) params.bumpScale = attributes['Bump Height'].value * 0.1;\n    if (attributes['Refraction Index']) params.refractionRatio = 1 / attributes['Refraction Index'].value;\n    this.parsePhysicalAttributes(params, attributes, maps);\n    this.parseStandardAttributes(params, attributes, maps);\n    this.parsePhongAttributes(params, attributes, maps);\n    return params;\n  }\n  parsePhysicalAttributes(params, attributes\n  /*, maps*/) {\n    if (attributes.Clearcoat && attributes.Clearcoat.value > 0) {\n      params.clearcoat = attributes.Clearcoat.value;\n      if (attributes['Clearcoat Gloss']) {\n        params.clearcoatRoughness = 0.5 * (1 - attributes['Clearcoat Gloss'].value);\n      }\n    }\n  }\n  parseStandardAttributes(params, attributes, maps) {\n    if (attributes.Luminous) {\n      params.emissiveIntensity = attributes.Luminous.value;\n      if (attributes['Luminous Color'] && !maps.emissive) {\n        params.emissive = new Color().fromArray(attributes['Luminous Color'].value);\n      } else {\n        params.emissive = new Color(0x808080);\n      }\n    }\n    if (attributes.Roughness && !maps.roughnessMap) params.roughness = attributes.Roughness.value;\n    if (attributes.Metallic && !maps.metalnessMap) params.metalness = attributes.Metallic.value;\n  }\n  parsePhongAttributes(params, attributes, maps) {\n    if (attributes.Diffuse) params.color.multiplyScalar(attributes.Diffuse.value);\n    if (attributes.Reflection) {\n      params.reflectivity = attributes.Reflection.value;\n      params.combine = AddOperation;\n    }\n    if (attributes.Luminosity) {\n      params.emissiveIntensity = attributes.Luminosity.value;\n      if (!maps.emissiveMap && !maps.map) {\n        params.emissive = params.color;\n      } else {\n        params.emissive = new Color(0x808080);\n      }\n    } // parse specular if there is no roughness - we will interpret the material as 'Phong' in this case\n\n    if (!attributes.Roughness && attributes.Specular && !maps.specularMap) {\n      if (attributes['Color Highlight']) {\n        params.specular = new Color().setScalar(attributes.Specular.value).lerp(params.color.clone().multiplyScalar(attributes.Specular.value), attributes['Color Highlight'].value);\n      } else {\n        params.specular = new Color().setScalar(attributes.Specular.value);\n      }\n    }\n    if (params.specular && attributes.Glossiness) {\n      params.shininess = 7 + Math.pow(2, attributes.Glossiness.value * 12 + 2);\n    }\n  }\n  parseEnvMap(connections, maps, attributes) {\n    if (connections.envMap) {\n      const envMap = this.loadTexture(connections.envMap);\n      if (attributes.transparent && attributes.opacity < 0.999) {\n        envMap.mapping = EquirectangularRefractionMapping; // Reflectivity and refraction mapping don't work well together in Phong materials\n\n        if (attributes.reflectivity !== undefined) {\n          delete attributes.reflectivity;\n          delete attributes.combine;\n        }\n        if (attributes.metalness !== undefined) {\n          delete attributes.metalness;\n        }\n      } else {\n        envMap.mapping = EquirectangularReflectionMapping;\n      }\n      maps.envMap = envMap;\n    }\n  } // get texture defined at top level by its index\n\n  getTexturePathByIndex(index) {\n    let fileName = '';\n    if (!_lwoTree.textures) return fileName;\n    _lwoTree.textures.forEach(function (texture) {\n      if (texture.index === index) fileName = texture.fileName;\n    });\n    return fileName;\n  }\n  loadTexture(path) {\n    if (!path) return null;\n    const texture = this.textureLoader.load(path, undefined, undefined, function () {\n      console.warn('LWOLoader: non-standard resource hierarchy. Use `resourcePath` parameter to specify root content directory.');\n    });\n    return texture;\n  } // 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n\n  getWrappingType(num) {\n    switch (num) {\n      case 0:\n        console.warn('LWOLoader: \"Reset\" texture wrapping type is not supported in three.js');\n        return ClampToEdgeWrapping;\n      case 1:\n        return RepeatWrapping;\n      case 2:\n        return MirroredRepeatWrapping;\n      case 3:\n        return ClampToEdgeWrapping;\n    }\n  }\n  getMaterialType(nodeData) {\n    if (nodeData.Clearcoat && nodeData.Clearcoat.value > 0) return MeshPhysicalMaterial;\n    if (nodeData.Roughness) return MeshStandardMaterial;\n    return MeshPhongMaterial;\n  }\n}\nclass GeometryParser {\n  parse(geoData, layer) {\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(geoData.points, 3));\n    const indices = this.splitIndices(geoData.vertexIndices, geoData.polygonDimensions);\n    geometry.setIndex(indices);\n    this.parseGroups(geometry, geoData);\n    geometry.computeVertexNormals();\n    this.parseUVs(geometry, layer, indices);\n    this.parseMorphTargets(geometry, layer, indices); // TODO: z may need to be reversed to account for coordinate system change\n\n    geometry.translate(-layer.pivot[0], -layer.pivot[1], -layer.pivot[2]); // let userData = geometry.userData;\n    // geometry = geometry.toNonIndexed()\n    // geometry.userData = userData;\n\n    return geometry;\n  } // split quads into tris\n\n  splitIndices(indices, polygonDimensions) {\n    const remappedIndices = [];\n    let i = 0;\n    polygonDimensions.forEach(function (dim) {\n      if (dim < 4) {\n        for (let k = 0; k < dim; k++) remappedIndices.push(indices[i + k]);\n      } else if (dim === 4) {\n        remappedIndices.push(indices[i], indices[i + 1], indices[i + 2], indices[i], indices[i + 2], indices[i + 3]);\n      } else if (dim > 4) {\n        for (let k = 1; k < dim - 1; k++) {\n          remappedIndices.push(indices[i], indices[i + k], indices[i + k + 1]);\n        }\n        console.warn('LWOLoader: polygons with greater than 4 sides are not supported');\n      }\n      i += dim;\n    });\n    return remappedIndices;\n  } // NOTE: currently ignoring poly indices and assuming that they are intelligently ordered\n\n  parseGroups(geometry, geoData) {\n    const tags = _lwoTree.tags;\n    const matNames = [];\n    let elemSize = 3;\n    if (geoData.type === 'lines') elemSize = 2;\n    if (geoData.type === 'points') elemSize = 1;\n    const remappedIndices = this.splitMaterialIndices(geoData.polygonDimensions, geoData.materialIndices);\n    let indexNum = 0; // create new indices in numerical order\n\n    const indexPairs = {}; // original indices mapped to numerical indices\n\n    let prevMaterialIndex;\n    let materialIndex;\n    let prevStart = 0;\n    let currentCount = 0;\n    for (let i = 0; i < remappedIndices.length; i += 2) {\n      materialIndex = remappedIndices[i + 1];\n      if (i === 0) matNames[indexNum] = tags[materialIndex];\n      if (prevMaterialIndex === undefined) prevMaterialIndex = materialIndex;\n      if (materialIndex !== prevMaterialIndex) {\n        let currentIndex;\n        if (indexPairs[tags[prevMaterialIndex]]) {\n          currentIndex = indexPairs[tags[prevMaterialIndex]];\n        } else {\n          currentIndex = indexNum;\n          indexPairs[tags[prevMaterialIndex]] = indexNum;\n          matNames[indexNum] = tags[prevMaterialIndex];\n          indexNum++;\n        }\n        geometry.addGroup(prevStart, currentCount, currentIndex);\n        prevStart += currentCount;\n        prevMaterialIndex = materialIndex;\n        currentCount = 0;\n      }\n      currentCount += elemSize;\n    } // the loop above doesn't add the last group, do that here.\n\n    if (geometry.groups.length > 0) {\n      let currentIndex;\n      if (indexPairs[tags[materialIndex]]) {\n        currentIndex = indexPairs[tags[materialIndex]];\n      } else {\n        currentIndex = indexNum;\n        indexPairs[tags[materialIndex]] = indexNum;\n        matNames[indexNum] = tags[materialIndex];\n      }\n      geometry.addGroup(prevStart, currentCount, currentIndex);\n    } // Mat names from TAGS chunk, used to build up an array of materials for this geometry\n\n    geometry.userData.matNames = matNames;\n  }\n  splitMaterialIndices(polygonDimensions, indices) {\n    const remappedIndices = [];\n    polygonDimensions.forEach(function (dim, i) {\n      if (dim <= 3) {\n        remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n      } else if (dim === 4) {\n        remappedIndices.push(indices[i * 2], indices[i * 2 + 1], indices[i * 2], indices[i * 2 + 1]);\n      } else {\n        // ignore > 4 for now\n        for (let k = 0; k < dim - 2; k++) {\n          remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n        }\n      }\n    });\n    return remappedIndices;\n  } // UV maps:\n  // 1: are defined via index into an array of points, not into a geometry\n  // - the geometry is also defined by an index into this array, but the indexes may not match\n  // 2: there can be any number of UV maps for a single geometry. Here these are combined,\n  // \twith preference given to the first map encountered\n  // 3: UV maps can be partial - that is, defined for only a part of the geometry\n  // 4: UV maps can be VMAP or VMAD (discontinuous, to allow for seams). In practice, most\n  // UV maps are defined as partially VMAP and partially VMAD\n  // VMADs are currently not supported\n\n  parseUVs(geometry, layer) {\n    // start by creating a UV map set to zero for the whole geometry\n    const remappedUVs = Array.from(Array(geometry.attributes.position.count * 2), function () {\n      return 0;\n    });\n    for (const name in layer.uvs) {\n      const uvs = layer.uvs[name].uvs;\n      const uvIndices = layer.uvs[name].uvIndices;\n      uvIndices.forEach(function (i, j) {\n        remappedUVs[i * 2] = uvs[j * 2];\n        remappedUVs[i * 2 + 1] = uvs[j * 2 + 1];\n      });\n    }\n    geometry.setAttribute('uv', new Float32BufferAttribute(remappedUVs, 2));\n  }\n  parseMorphTargets(geometry, layer) {\n    let num = 0;\n    for (const name in layer.morphTargets) {\n      const remappedPoints = geometry.attributes.position.array.slice();\n      if (!geometry.morphAttributes.position) geometry.morphAttributes.position = [];\n      const morphPoints = layer.morphTargets[name].points;\n      const morphIndices = layer.morphTargets[name].indices;\n      const type = layer.morphTargets[name].type;\n      morphIndices.forEach(function (i, j) {\n        if (type === 'relative') {\n          remappedPoints[i * 3] += morphPoints[j * 3];\n          remappedPoints[i * 3 + 1] += morphPoints[j * 3 + 1];\n          remappedPoints[i * 3 + 2] += morphPoints[j * 3 + 2];\n        } else {\n          remappedPoints[i * 3] = morphPoints[j * 3];\n          remappedPoints[i * 3 + 1] = morphPoints[j * 3 + 1];\n          remappedPoints[i * 3 + 2] = morphPoints[j * 3 + 2];\n        }\n      });\n      geometry.morphAttributes.position[num] = new Float32BufferAttribute(remappedPoints, 3);\n      geometry.morphAttributes.position[num].name = name;\n      num++;\n    }\n    geometry.morphTargetsRelative = false;\n  }\n} // ************** UTILITY FUNCTIONS **************\n\nfunction extractParentUrl(url, dir) {\n  const index = url.indexOf(dir);\n  if (index === -1) return './';\n  return url.substr(0, index);\n}\nexport { LWOLoader };","map":{"version":3,"names":["Loader","FileLoader","TextureLoader","Points","LineSegments","Mesh","PointsMaterial","LineBasicMaterial","BufferAttribute","MeshPhongMaterial","BackSide","DoubleSide","FrontSide","Vector2","Color","AddOperation","EquirectangularRefractionMapping","EquirectangularReflectionMapping","ClampToEdgeWrapping","MirroredRepeatWrapping","RepeatWrapping","MeshPhysicalMaterial","MeshStandardMaterial","BufferGeometry","Float32BufferAttribute","IFFParser","_lwoTree","LWOLoader","constructor","manager","parameters","resourcePath","undefined","load","url","onLoad","onProgress","onError","scope","path","extractParentUrl","modelName","split","pop","loader","setPath","setResponseType","buffer","parse","e","console","error","itemError","iffBuffer","textureLoader","setCrossOrigin","crossOrigin","LWOTreeParser","materials","MaterialParser","defaultLayerName","meshes","parseLayers","finalMeshes","geometryParser","GeometryParser","layers","forEach","layer","geometry","mesh","parseMesh","number","parent","push","add","applyPivots","getMaterials","userData","matNames","type","duplicateUVs","name","pivot","traverse","child","position","x","y","z","parentPivot","namesArray","i","getMaterialByName","mat","spec","color","size","map","morphTargets","filtered","filter","Boolean","length","m","Array","isArray","aoMap","material","setAttribute","attributes","uv","array","textures","format","parseMaterial","parseMaterialLwo2","materialData","params","side","getSide","flatShading","getSmooth","connections","parseConnections","nodes","maps","parseTextureNodes","parseAttributeImageMaps","parseAttributes","parseEnvMap","Object","assign","materialType","getMaterialType","smooth","materialConnections","inputName","inputNodeName","nodeName","index","matNode","getNodeByRefName","envMap","fileName","refName","textureNodes","node","texture","loadTexture","widthWrappingMode","wrapS","getWrappingType","heightWrappingMode","wrapT","roughnessMap","roughness","specularMap","specular","emissiveMap","emissive","metalnessMap","metalness","alphaMap","transparent","normalMap","amplitude","normalScale","bumpMap","attribute","mapData","getTexturePathByIndex","imageIndex","wrap","w","h","fromArray","value","Transparency","opacity","bumpScale","refractionRatio","parsePhysicalAttributes","parseStandardAttributes","parsePhongAttributes","Clearcoat","clearcoat","clearcoatRoughness","Luminous","emissiveIntensity","Roughness","Metallic","Diffuse","multiplyScalar","Reflection","reflectivity","combine","Luminosity","Specular","setScalar","lerp","clone","Glossiness","shininess","Math","pow","mapping","warn","num","nodeData","geoData","points","indices","splitIndices","vertexIndices","polygonDimensions","setIndex","parseGroups","computeVertexNormals","parseUVs","parseMorphTargets","translate","remappedIndices","dim","k","tags","elemSize","splitMaterialIndices","materialIndices","indexNum","indexPairs","prevMaterialIndex","materialIndex","prevStart","currentCount","currentIndex","addGroup","groups","remappedUVs","from","count","uvs","uvIndices","j","remappedPoints","slice","morphAttributes","morphPoints","morphIndices","morphTargetsRelative","dir","indexOf","substr"],"sources":["/Users/desarrollo/Desktop/free/node_modules/three-stdlib/loaders/LWOLoader.js"],"sourcesContent":["import { Loader, FileLoader, TextureLoader, Points, LineSegments, Mesh, PointsMaterial, LineBasicMaterial, BufferAttribute, MeshPhongMaterial, BackSide, DoubleSide, FrontSide, Vector2, Color, AddOperation, EquirectangularRefractionMapping, EquirectangularReflectionMapping, ClampToEdgeWrapping, MirroredRepeatWrapping, RepeatWrapping, MeshPhysicalMaterial, MeshStandardMaterial, BufferGeometry, Float32BufferAttribute } from 'three';\nimport { IFFParser } from './lwo/IFFParser.js';\n\n/**\n * @version 1.1.1\n *\n * @desc Load files in LWO3 and LWO2 format on Three.js\n *\n * LWO3 format specification:\n * \thttp://static.lightwave3d.com/sdk/2018/html/filefmts/lwo3.html\n *\n * LWO2 format specification:\n * \thttp://static.lightwave3d.com/sdk/2018/html/filefmts/lwo2.html\n *\n **/\n\nlet _lwoTree;\n\nclass LWOLoader extends Loader {\n  constructor(manager, parameters = {}) {\n    super(manager);\n    this.resourcePath = parameters.resourcePath !== undefined ? parameters.resourcePath : '';\n  }\n\n  load(url, onLoad, onProgress, onError) {\n    const scope = this;\n    const path = scope.path === '' ? extractParentUrl(url, 'Objects') : scope.path; // give the mesh a default name based on the filename\n\n    const modelName = url.split(path).pop().split('.')[0];\n    const loader = new FileLoader(this.manager);\n    loader.setPath(scope.path);\n    loader.setResponseType('arraybuffer');\n    loader.load(url, function (buffer) {\n      // console.time( 'Total parsing: ' );\n      try {\n        onLoad(scope.parse(buffer, path, modelName));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      } // console.timeEnd( 'Total parsing: ' );\n\n    }, onProgress, onError);\n  }\n\n  parse(iffBuffer, path, modelName) {\n    _lwoTree = new IFFParser().parse(iffBuffer); // console.log( 'lwoTree', lwoTree );\n\n    const textureLoader = new TextureLoader(this.manager).setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    return new LWOTreeParser(textureLoader).parse(modelName);\n  }\n\n} // Parse the lwoTree object\n\n\nclass LWOTreeParser {\n  constructor(textureLoader) {\n    this.textureLoader = textureLoader;\n  }\n\n  parse(modelName) {\n    this.materials = new MaterialParser(this.textureLoader).parse();\n    this.defaultLayerName = modelName;\n    this.meshes = this.parseLayers();\n    return {\n      materials: this.materials,\n      meshes: this.meshes\n    };\n  }\n\n  parseLayers() {\n    // array of all meshes for building hierarchy\n    const meshes = []; // final array containing meshes with scene graph hierarchy set up\n\n    const finalMeshes = [];\n    const geometryParser = new GeometryParser();\n    const scope = this;\n\n    _lwoTree.layers.forEach(function (layer) {\n      const geometry = geometryParser.parse(layer.geometry, layer);\n      const mesh = scope.parseMesh(geometry, layer);\n      meshes[layer.number] = mesh;\n      if (layer.parent === -1) finalMeshes.push(mesh);else meshes[layer.parent].add(mesh);\n    });\n\n    this.applyPivots(finalMeshes);\n    return finalMeshes;\n  }\n\n  parseMesh(geometry, layer) {\n    let mesh;\n    const materials = this.getMaterials(geometry.userData.matNames, layer.geometry.type);\n    this.duplicateUVs(geometry, materials);\n    if (layer.geometry.type === 'points') mesh = new Points(geometry, materials);else if (layer.geometry.type === 'lines') mesh = new LineSegments(geometry, materials);else mesh = new Mesh(geometry, materials);\n    if (layer.name) mesh.name = layer.name;else mesh.name = this.defaultLayerName + '_layer_' + layer.number;\n    mesh.userData.pivot = layer.pivot;\n    return mesh;\n  } // TODO: may need to be reversed in z to convert LWO to three.js coordinates\n\n\n  applyPivots(meshes) {\n    meshes.forEach(function (mesh) {\n      mesh.traverse(function (child) {\n        const pivot = child.userData.pivot;\n        child.position.x += pivot[0];\n        child.position.y += pivot[1];\n        child.position.z += pivot[2];\n\n        if (child.parent) {\n          const parentPivot = child.parent.userData.pivot;\n          child.position.x -= parentPivot[0];\n          child.position.y -= parentPivot[1];\n          child.position.z -= parentPivot[2];\n        }\n      });\n    });\n  }\n\n  getMaterials(namesArray, type) {\n    const materials = [];\n    const scope = this;\n    namesArray.forEach(function (name, i) {\n      materials[i] = scope.getMaterialByName(name);\n    }); // convert materials to line or point mats if required\n\n    if (type === 'points' || type === 'lines') {\n      materials.forEach(function (mat, i) {\n        const spec = {\n          color: mat.color\n        };\n\n        if (type === 'points') {\n          spec.size = 0.1;\n          spec.map = mat.map;\n          spec.morphTargets = mat.morphTargets;\n          materials[i] = new PointsMaterial(spec);\n        } else if (type === 'lines') {\n          materials[i] = new LineBasicMaterial(spec);\n        }\n      });\n    } // if there is only one material, return that directly instead of array\n\n\n    const filtered = materials.filter(Boolean);\n    if (filtered.length === 1) return filtered[0];\n    return materials;\n  }\n\n  getMaterialByName(name) {\n    return this.materials.filter(function (m) {\n      return m.name === name;\n    })[0];\n  } // If the material has an aoMap, duplicate UVs\n\n\n  duplicateUVs(geometry, materials) {\n    let duplicateUVs = false;\n\n    if (!Array.isArray(materials)) {\n      if (materials.aoMap) duplicateUVs = true;\n    } else {\n      materials.forEach(function (material) {\n        if (material.aoMap) duplicateUVs = true;\n      });\n    }\n\n    if (!duplicateUVs) return;\n    geometry.setAttribute('uv2', new BufferAttribute(geometry.attributes.uv.array, 2));\n  }\n\n}\n\nclass MaterialParser {\n  constructor(textureLoader) {\n    this.textureLoader = textureLoader;\n  }\n\n  parse() {\n    const materials = [];\n    this.textures = {};\n\n    for (const name in _lwoTree.materials) {\n      if (_lwoTree.format === 'LWO3') {\n        materials.push(this.parseMaterial(_lwoTree.materials[name], name, _lwoTree.textures));\n      } else if (_lwoTree.format === 'LWO2') {\n        materials.push(this.parseMaterialLwo2(_lwoTree.materials[name], name, _lwoTree.textures));\n      }\n    }\n\n    return materials;\n  }\n\n  parseMaterial(materialData, name, textures) {\n    let params = {\n      name: name,\n      side: this.getSide(materialData.attributes),\n      flatShading: this.getSmooth(materialData.attributes)\n    };\n    const connections = this.parseConnections(materialData.connections, materialData.nodes);\n    const maps = this.parseTextureNodes(connections.maps);\n    this.parseAttributeImageMaps(connections.attributes, textures, maps, materialData.maps);\n    const attributes = this.parseAttributes(connections.attributes, maps);\n    this.parseEnvMap(connections, maps, attributes);\n    params = Object.assign(maps, params);\n    params = Object.assign(params, attributes);\n    const materialType = this.getMaterialType(connections.attributes);\n    return new materialType(params);\n  }\n\n  parseMaterialLwo2(materialData, name\n  /*, textures*/\n  ) {\n    let params = {\n      name: name,\n      side: this.getSide(materialData.attributes),\n      flatShading: this.getSmooth(materialData.attributes)\n    };\n    const attributes = this.parseAttributes(materialData.attributes, {});\n    params = Object.assign(params, attributes);\n    return new MeshPhongMaterial(params);\n  } // Note: converting from left to right handed coords by switching x -> -x in vertices, and\n  // then switching mat FrontSide -> BackSide\n  // NB: this means that FrontSide and BackSide have been switched!\n\n\n  getSide(attributes) {\n    if (!attributes.side) return BackSide;\n\n    switch (attributes.side) {\n      case 0:\n      case 1:\n        return BackSide;\n\n      case 2:\n        return FrontSide;\n\n      case 3:\n        return DoubleSide;\n    }\n  }\n\n  getSmooth(attributes) {\n    if (!attributes.smooth) return true;\n    return !attributes.smooth;\n  }\n\n  parseConnections(connections, nodes) {\n    const materialConnections = {\n      maps: {}\n    };\n    const inputName = connections.inputName;\n    const inputNodeName = connections.inputNodeName;\n    const nodeName = connections.nodeName;\n    const scope = this;\n    inputName.forEach(function (name, index) {\n      if (name === 'Material') {\n        const matNode = scope.getNodeByRefName(inputNodeName[index], nodes);\n        materialConnections.attributes = matNode.attributes;\n        materialConnections.envMap = matNode.fileName;\n        materialConnections.name = inputNodeName[index];\n      }\n    });\n    nodeName.forEach(function (name, index) {\n      if (name === materialConnections.name) {\n        materialConnections.maps[inputName[index]] = scope.getNodeByRefName(inputNodeName[index], nodes);\n      }\n    });\n    return materialConnections;\n  }\n\n  getNodeByRefName(refName, nodes) {\n    for (const name in nodes) {\n      if (nodes[name].refName === refName) return nodes[name];\n    }\n  }\n\n  parseTextureNodes(textureNodes) {\n    const maps = {};\n\n    for (const name in textureNodes) {\n      const node = textureNodes[name];\n      const path = node.fileName;\n      if (!path) return;\n      const texture = this.loadTexture(path);\n      if (node.widthWrappingMode !== undefined) texture.wrapS = this.getWrappingType(node.widthWrappingMode);\n      if (node.heightWrappingMode !== undefined) texture.wrapT = this.getWrappingType(node.heightWrappingMode);\n\n      switch (name) {\n        case 'Color':\n          maps.map = texture;\n          break;\n\n        case 'Roughness':\n          maps.roughnessMap = texture;\n          maps.roughness = 0.5;\n          break;\n\n        case 'Specular':\n          maps.specularMap = texture;\n          maps.specular = 0xffffff;\n          break;\n\n        case 'Luminous':\n          maps.emissiveMap = texture;\n          maps.emissive = 0x808080;\n          break;\n\n        case 'Luminous Color':\n          maps.emissive = 0x808080;\n          break;\n\n        case 'Metallic':\n          maps.metalnessMap = texture;\n          maps.metalness = 0.5;\n          break;\n\n        case 'Transparency':\n        case 'Alpha':\n          maps.alphaMap = texture;\n          maps.transparent = true;\n          break;\n\n        case 'Normal':\n          maps.normalMap = texture;\n          if (node.amplitude !== undefined) maps.normalScale = new Vector2(node.amplitude, node.amplitude);\n          break;\n\n        case 'Bump':\n          maps.bumpMap = texture;\n          break;\n      }\n    } // LWO BSDF materials can have both spec and rough, but this is not valid in three\n\n\n    if (maps.roughnessMap && maps.specularMap) delete maps.specularMap;\n    return maps;\n  } // maps can also be defined on individual material attributes, parse those here\n  // This occurs on Standard (Phong) surfaces\n\n\n  parseAttributeImageMaps(attributes, textures, maps) {\n    for (const name in attributes) {\n      const attribute = attributes[name];\n\n      if (attribute.maps) {\n        const mapData = attribute.maps[0];\n        const path = this.getTexturePathByIndex(mapData.imageIndex, textures);\n        if (!path) return;\n        const texture = this.loadTexture(path);\n        if (mapData.wrap !== undefined) texture.wrapS = this.getWrappingType(mapData.wrap.w);\n        if (mapData.wrap !== undefined) texture.wrapT = this.getWrappingType(mapData.wrap.h);\n\n        switch (name) {\n          case 'Color':\n            maps.map = texture;\n            break;\n\n          case 'Diffuse':\n            maps.aoMap = texture;\n            break;\n\n          case 'Roughness':\n            maps.roughnessMap = texture;\n            maps.roughness = 1;\n            break;\n\n          case 'Specular':\n            maps.specularMap = texture;\n            maps.specular = 0xffffff;\n            break;\n\n          case 'Luminosity':\n            maps.emissiveMap = texture;\n            maps.emissive = 0x808080;\n            break;\n\n          case 'Metallic':\n            maps.metalnessMap = texture;\n            maps.metalness = 1;\n            break;\n\n          case 'Transparency':\n          case 'Alpha':\n            maps.alphaMap = texture;\n            maps.transparent = true;\n            break;\n\n          case 'Normal':\n            maps.normalMap = texture;\n            break;\n\n          case 'Bump':\n            maps.bumpMap = texture;\n            break;\n        }\n      }\n    }\n  }\n\n  parseAttributes(attributes, maps) {\n    const params = {}; // don't use color data if color map is present\n\n    if (attributes.Color && !maps.map) {\n      params.color = new Color().fromArray(attributes.Color.value);\n    } else {\n      params.color = new Color();\n    }\n\n    if (attributes.Transparency && attributes.Transparency.value !== 0) {\n      params.opacity = 1 - attributes.Transparency.value;\n      params.transparent = true;\n    }\n\n    if (attributes['Bump Height']) params.bumpScale = attributes['Bump Height'].value * 0.1;\n    if (attributes['Refraction Index']) params.refractionRatio = 1 / attributes['Refraction Index'].value;\n    this.parsePhysicalAttributes(params, attributes, maps);\n    this.parseStandardAttributes(params, attributes, maps);\n    this.parsePhongAttributes(params, attributes, maps);\n    return params;\n  }\n\n  parsePhysicalAttributes(params, attributes\n  /*, maps*/\n  ) {\n    if (attributes.Clearcoat && attributes.Clearcoat.value > 0) {\n      params.clearcoat = attributes.Clearcoat.value;\n\n      if (attributes['Clearcoat Gloss']) {\n        params.clearcoatRoughness = 0.5 * (1 - attributes['Clearcoat Gloss'].value);\n      }\n    }\n  }\n\n  parseStandardAttributes(params, attributes, maps) {\n    if (attributes.Luminous) {\n      params.emissiveIntensity = attributes.Luminous.value;\n\n      if (attributes['Luminous Color'] && !maps.emissive) {\n        params.emissive = new Color().fromArray(attributes['Luminous Color'].value);\n      } else {\n        params.emissive = new Color(0x808080);\n      }\n    }\n\n    if (attributes.Roughness && !maps.roughnessMap) params.roughness = attributes.Roughness.value;\n    if (attributes.Metallic && !maps.metalnessMap) params.metalness = attributes.Metallic.value;\n  }\n\n  parsePhongAttributes(params, attributes, maps) {\n    if (attributes.Diffuse) params.color.multiplyScalar(attributes.Diffuse.value);\n\n    if (attributes.Reflection) {\n      params.reflectivity = attributes.Reflection.value;\n      params.combine = AddOperation;\n    }\n\n    if (attributes.Luminosity) {\n      params.emissiveIntensity = attributes.Luminosity.value;\n\n      if (!maps.emissiveMap && !maps.map) {\n        params.emissive = params.color;\n      } else {\n        params.emissive = new Color(0x808080);\n      }\n    } // parse specular if there is no roughness - we will interpret the material as 'Phong' in this case\n\n\n    if (!attributes.Roughness && attributes.Specular && !maps.specularMap) {\n      if (attributes['Color Highlight']) {\n        params.specular = new Color().setScalar(attributes.Specular.value).lerp(params.color.clone().multiplyScalar(attributes.Specular.value), attributes['Color Highlight'].value);\n      } else {\n        params.specular = new Color().setScalar(attributes.Specular.value);\n      }\n    }\n\n    if (params.specular && attributes.Glossiness) {\n      params.shininess = 7 + Math.pow(2, attributes.Glossiness.value * 12 + 2);\n    }\n  }\n\n  parseEnvMap(connections, maps, attributes) {\n    if (connections.envMap) {\n      const envMap = this.loadTexture(connections.envMap);\n\n      if (attributes.transparent && attributes.opacity < 0.999) {\n        envMap.mapping = EquirectangularRefractionMapping; // Reflectivity and refraction mapping don't work well together in Phong materials\n\n        if (attributes.reflectivity !== undefined) {\n          delete attributes.reflectivity;\n          delete attributes.combine;\n        }\n\n        if (attributes.metalness !== undefined) {\n          delete attributes.metalness;\n        }\n      } else {\n        envMap.mapping = EquirectangularReflectionMapping;\n      }\n\n      maps.envMap = envMap;\n    }\n  } // get texture defined at top level by its index\n\n\n  getTexturePathByIndex(index) {\n    let fileName = '';\n    if (!_lwoTree.textures) return fileName;\n\n    _lwoTree.textures.forEach(function (texture) {\n      if (texture.index === index) fileName = texture.fileName;\n    });\n\n    return fileName;\n  }\n\n  loadTexture(path) {\n    if (!path) return null;\n    const texture = this.textureLoader.load(path, undefined, undefined, function () {\n      console.warn('LWOLoader: non-standard resource hierarchy. Use `resourcePath` parameter to specify root content directory.');\n    });\n    return texture;\n  } // 0 = Reset, 1 = Repeat, 2 = Mirror, 3 = Edge\n\n\n  getWrappingType(num) {\n    switch (num) {\n      case 0:\n        console.warn('LWOLoader: \"Reset\" texture wrapping type is not supported in three.js');\n        return ClampToEdgeWrapping;\n\n      case 1:\n        return RepeatWrapping;\n\n      case 2:\n        return MirroredRepeatWrapping;\n\n      case 3:\n        return ClampToEdgeWrapping;\n    }\n  }\n\n  getMaterialType(nodeData) {\n    if (nodeData.Clearcoat && nodeData.Clearcoat.value > 0) return MeshPhysicalMaterial;\n    if (nodeData.Roughness) return MeshStandardMaterial;\n    return MeshPhongMaterial;\n  }\n\n}\n\nclass GeometryParser {\n  parse(geoData, layer) {\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new Float32BufferAttribute(geoData.points, 3));\n    const indices = this.splitIndices(geoData.vertexIndices, geoData.polygonDimensions);\n    geometry.setIndex(indices);\n    this.parseGroups(geometry, geoData);\n    geometry.computeVertexNormals();\n    this.parseUVs(geometry, layer, indices);\n    this.parseMorphTargets(geometry, layer, indices); // TODO: z may need to be reversed to account for coordinate system change\n\n    geometry.translate(-layer.pivot[0], -layer.pivot[1], -layer.pivot[2]); // let userData = geometry.userData;\n    // geometry = geometry.toNonIndexed()\n    // geometry.userData = userData;\n\n    return geometry;\n  } // split quads into tris\n\n\n  splitIndices(indices, polygonDimensions) {\n    const remappedIndices = [];\n    let i = 0;\n    polygonDimensions.forEach(function (dim) {\n      if (dim < 4) {\n        for (let k = 0; k < dim; k++) remappedIndices.push(indices[i + k]);\n      } else if (dim === 4) {\n        remappedIndices.push(indices[i], indices[i + 1], indices[i + 2], indices[i], indices[i + 2], indices[i + 3]);\n      } else if (dim > 4) {\n        for (let k = 1; k < dim - 1; k++) {\n          remappedIndices.push(indices[i], indices[i + k], indices[i + k + 1]);\n        }\n\n        console.warn('LWOLoader: polygons with greater than 4 sides are not supported');\n      }\n\n      i += dim;\n    });\n    return remappedIndices;\n  } // NOTE: currently ignoring poly indices and assuming that they are intelligently ordered\n\n\n  parseGroups(geometry, geoData) {\n    const tags = _lwoTree.tags;\n    const matNames = [];\n    let elemSize = 3;\n    if (geoData.type === 'lines') elemSize = 2;\n    if (geoData.type === 'points') elemSize = 1;\n    const remappedIndices = this.splitMaterialIndices(geoData.polygonDimensions, geoData.materialIndices);\n    let indexNum = 0; // create new indices in numerical order\n\n    const indexPairs = {}; // original indices mapped to numerical indices\n\n    let prevMaterialIndex;\n    let materialIndex;\n    let prevStart = 0;\n    let currentCount = 0;\n\n    for (let i = 0; i < remappedIndices.length; i += 2) {\n      materialIndex = remappedIndices[i + 1];\n      if (i === 0) matNames[indexNum] = tags[materialIndex];\n      if (prevMaterialIndex === undefined) prevMaterialIndex = materialIndex;\n\n      if (materialIndex !== prevMaterialIndex) {\n        let currentIndex;\n\n        if (indexPairs[tags[prevMaterialIndex]]) {\n          currentIndex = indexPairs[tags[prevMaterialIndex]];\n        } else {\n          currentIndex = indexNum;\n          indexPairs[tags[prevMaterialIndex]] = indexNum;\n          matNames[indexNum] = tags[prevMaterialIndex];\n          indexNum++;\n        }\n\n        geometry.addGroup(prevStart, currentCount, currentIndex);\n        prevStart += currentCount;\n        prevMaterialIndex = materialIndex;\n        currentCount = 0;\n      }\n\n      currentCount += elemSize;\n    } // the loop above doesn't add the last group, do that here.\n\n\n    if (geometry.groups.length > 0) {\n      let currentIndex;\n\n      if (indexPairs[tags[materialIndex]]) {\n        currentIndex = indexPairs[tags[materialIndex]];\n      } else {\n        currentIndex = indexNum;\n        indexPairs[tags[materialIndex]] = indexNum;\n        matNames[indexNum] = tags[materialIndex];\n      }\n\n      geometry.addGroup(prevStart, currentCount, currentIndex);\n    } // Mat names from TAGS chunk, used to build up an array of materials for this geometry\n\n\n    geometry.userData.matNames = matNames;\n  }\n\n  splitMaterialIndices(polygonDimensions, indices) {\n    const remappedIndices = [];\n    polygonDimensions.forEach(function (dim, i) {\n      if (dim <= 3) {\n        remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n      } else if (dim === 4) {\n        remappedIndices.push(indices[i * 2], indices[i * 2 + 1], indices[i * 2], indices[i * 2 + 1]);\n      } else {\n        // ignore > 4 for now\n        for (let k = 0; k < dim - 2; k++) {\n          remappedIndices.push(indices[i * 2], indices[i * 2 + 1]);\n        }\n      }\n    });\n    return remappedIndices;\n  } // UV maps:\n  // 1: are defined via index into an array of points, not into a geometry\n  // - the geometry is also defined by an index into this array, but the indexes may not match\n  // 2: there can be any number of UV maps for a single geometry. Here these are combined,\n  // \twith preference given to the first map encountered\n  // 3: UV maps can be partial - that is, defined for only a part of the geometry\n  // 4: UV maps can be VMAP or VMAD (discontinuous, to allow for seams). In practice, most\n  // UV maps are defined as partially VMAP and partially VMAD\n  // VMADs are currently not supported\n\n\n  parseUVs(geometry, layer) {\n    // start by creating a UV map set to zero for the whole geometry\n    const remappedUVs = Array.from(Array(geometry.attributes.position.count * 2), function () {\n      return 0;\n    });\n\n    for (const name in layer.uvs) {\n      const uvs = layer.uvs[name].uvs;\n      const uvIndices = layer.uvs[name].uvIndices;\n      uvIndices.forEach(function (i, j) {\n        remappedUVs[i * 2] = uvs[j * 2];\n        remappedUVs[i * 2 + 1] = uvs[j * 2 + 1];\n      });\n    }\n\n    geometry.setAttribute('uv', new Float32BufferAttribute(remappedUVs, 2));\n  }\n\n  parseMorphTargets(geometry, layer) {\n    let num = 0;\n\n    for (const name in layer.morphTargets) {\n      const remappedPoints = geometry.attributes.position.array.slice();\n      if (!geometry.morphAttributes.position) geometry.morphAttributes.position = [];\n      const morphPoints = layer.morphTargets[name].points;\n      const morphIndices = layer.morphTargets[name].indices;\n      const type = layer.morphTargets[name].type;\n      morphIndices.forEach(function (i, j) {\n        if (type === 'relative') {\n          remappedPoints[i * 3] += morphPoints[j * 3];\n          remappedPoints[i * 3 + 1] += morphPoints[j * 3 + 1];\n          remappedPoints[i * 3 + 2] += morphPoints[j * 3 + 2];\n        } else {\n          remappedPoints[i * 3] = morphPoints[j * 3];\n          remappedPoints[i * 3 + 1] = morphPoints[j * 3 + 1];\n          remappedPoints[i * 3 + 2] = morphPoints[j * 3 + 2];\n        }\n      });\n      geometry.morphAttributes.position[num] = new Float32BufferAttribute(remappedPoints, 3);\n      geometry.morphAttributes.position[num].name = name;\n      num++;\n    }\n\n    geometry.morphTargetsRelative = false;\n  }\n\n} // ************** UTILITY FUNCTIONS **************\n\n\nfunction extractParentUrl(url, dir) {\n  const index = url.indexOf(dir);\n  if (index === -1) return './';\n  return url.substr(0, index);\n}\n\nexport { LWOLoader };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}