{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContentAssist = void 0;\nvar interpreter_1 = require(\"../../grammar/interpreter\");\nvar first_1 = __importDefault(require(\"lodash/first\"));\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\nvar ContentAssist = /** @class */function () {\n  function ContentAssist() {}\n  ContentAssist.prototype.initContentAssist = function () {};\n  ContentAssist.prototype.computeContentAssist = function (startRuleName, precedingInput) {\n    var startRuleGast = this.gastProductionsCache[startRuleName];\n    if ((0, isUndefined_1.default)(startRuleGast)) {\n      throw Error(\"Rule ->\".concat(startRuleName, \"<- does not exist in this grammar.\"));\n    }\n    return (0, interpreter_1.nextPossibleTokensAfter)([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead);\n  };\n  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n  // TODO: should this be more explicitly part of the public API?\n  ContentAssist.prototype.getNextPossibleTokenTypes = function (grammarPath) {\n    var topRuleName = (0, first_1.default)(grammarPath.ruleStack);\n    var gastProductions = this.getGAstProductions();\n    var topProduction = gastProductions[topRuleName];\n    var nextPossibleTokenTypes = new interpreter_1.NextAfterTokenWalker(topProduction, grammarPath).startWalking();\n    return nextPossibleTokenTypes;\n  };\n  return ContentAssist;\n}();\nexports.ContentAssist = ContentAssist;","map":{"version":3,"mappings":";;;;;;;;;;;AAMA;AAIA;AACA;AAGA;EAAA,0BAqCA;EApCEA,yCAAiB,GAAjB,aAAqB,CAAC;EAEfA,4CAAoB,GAA3B,UAEEC,aAAqB,EACrBC,cAAwB;IAExB,IAAMC,aAAa,GAAG,IAAI,CAACC,oBAAoB,CAACH,aAAa,CAAC;IAE9D,IAAI,yBAAW,EAACE,aAAa,CAAC,EAAE;MAC9B,MAAME,KAAK,CAAC,iBAAUJ,aAAa,uCAAoC,CAAC;;IAG1E,OAAO,yCAAuB,EAC5B,CAACE,aAAa,CAAC,EACfD,cAAc,EACd,IAAI,CAACI,YAAY,EACjB,IAAI,CAACC,YAAY,CAClB;EACH,CAAC;EAED;EACA;EACOP,iDAAyB,GAAhC,UAEEQ,WAA8B;IAE9B,IAAMC,WAAW,GAAG,mBAAK,EAACD,WAAW,CAACE,SAAS,CAAE;IACjD,IAAMC,eAAe,GAAG,IAAI,CAACC,kBAAkB,EAAE;IACjD,IAAMC,aAAa,GAAGF,eAAe,CAACF,WAAW,CAAC;IAClD,IAAMK,sBAAsB,GAAG,IAAIC,kCAAoB,CACrDF,aAAa,EACbL,WAAW,CACZ,CAACQ,YAAY,EAAE;IAChB,OAAOF,sBAAsB;EAC/B,CAAC;EACH,oBAAC;AAAD,CAAC,EArCD;AAAaG","names":["ContentAssist","startRuleName","precedingInput","startRuleGast","gastProductionsCache","Error","tokenMatcher","maxLookahead","grammarPath","topRuleName","ruleStack","gastProductions","getGAstProductions","topProduction","nextPossibleTokenTypes","interpreter_1","startWalking","exports"],"sources":["/Users/desarrollo/Desktop/free/node_modules/chevrotain/src/parse/parser/traits/context_assist.ts"],"sourcesContent":["import {\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType\n} from \"@chevrotain/types\"\nimport {\n  NextAfterTokenWalker,\n  nextPossibleTokensAfter\n} from \"../../grammar/interpreter\"\nimport first from \"lodash/first\"\nimport isUndefined from \"lodash/isUndefined\"\nimport { MixedInParser } from \"./parser_traits\"\n\nexport class ContentAssist {\n  initContentAssist() {}\n\n  public computeContentAssist(\n    this: MixedInParser,\n    startRuleName: string,\n    precedingInput: IToken[]\n  ): ISyntacticContentAssistPath[] {\n    const startRuleGast = this.gastProductionsCache[startRuleName]\n\n    if (isUndefined(startRuleGast)) {\n      throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`)\n    }\n\n    return nextPossibleTokensAfter(\n      [startRuleGast],\n      precedingInput,\n      this.tokenMatcher,\n      this.maxLookahead\n    )\n  }\n\n  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n  // TODO: should this be more explicitly part of the public API?\n  public getNextPossibleTokenTypes(\n    this: MixedInParser,\n    grammarPath: ITokenGrammarPath\n  ): TokenType[] {\n    const topRuleName = first(grammarPath.ruleStack)!\n    const gastProductions = this.getGAstProductions()\n    const topProduction = gastProductions[topRuleName]\n    const nextPossibleTokenTypes = new NextAfterTokenWalker(\n      topProduction,\n      grammarPath\n    ).startWalking()\n    return nextPossibleTokenTypes\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}